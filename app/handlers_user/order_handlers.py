import random
from aiogram import F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
# from aiogram.types import FSInputFile as send_file
from app.functions import researches, services, actions
from aiogram.types.input_file import InputFile as send_file
from app.database.requests.order_requests import get_order_number
from app.keyboards_user.default_keyboard import default_keyboard_builder
from app.keyboards_user.inline.payment_keyboard import get_payment_buttons
from app.keyboards_user.inline.order_cart_keyboard import get_cart_buttons
from app.keyboards_user.inline.buttons_pagination_keyboard import pagination
from app.keyboards_user.inline.actions_keyboard import actions_categories, actions_subcategories, action_data
from app.keyboards_user.inline.services_keyboard import service_categories, service_subcategories, service_data
from app.keyboards_user.inline.researches_keyboard import research_categories, research_subcategories, research_data

from app.handlers_user.main_handlers import router

# –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –∏ –∫–æ–º–∞–Ω–¥—ã)
@router.message(Command('researches', 'services'))
@router.callback_query(F.data.in_({'researches','services','actions', 'notice_actions'}))
async def categories(m_or_q: Message | CallbackQuery) -> None:
    if isinstance(m_or_q, Message):
        if m_or_q.text  ==  '/researches':
            await m_or_q.answer('üíâ–òc—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup = await research_categories(m_or_q.from_user.id))
        elif m_or_q.text  ==  '/services':
            await m_or_q.answer('üßë‚Äç‚öïÔ∏è–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —É—Å–ª—É–≥–∏\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup = await service_categories(m_or_q.from_user.id))
    else:    
        if m_or_q.data[:-2]  ==  'research':
            await m_or_q.answer()
            await m_or_q.message.edit_text('üíâ–òc—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:')
            await m_or_q.message.edit_reply_markup(reply_markup = await research_categories(m_or_q.from_user.id))
        elif m_or_q.data[:-1]  ==  'service':
            await m_or_q.answer()
            await m_or_q.message.edit_text('üßë‚Äç‚öïÔ∏è–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —É—Å–ª—É–≥–∏\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:')
            await m_or_q.message.edit_reply_markup(reply_markup = await service_categories(m_or_q.from_user.id))
        elif m_or_q.data[:-1]  ==  'action':
            await m_or_q.answer()
            await m_or_q.message.edit_text('üõçÔ∏è–ê–∫—Ü–∏–∏\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:')
            await m_or_q.message.edit_reply_markup(reply_markup = await actions_categories())
        elif m_or_q.data  ==  'notice_actions':
            await m_or_q.answer()
            await m_or_q.message.answer('üõçÔ∏è–ê–∫—Ü–∏–∏\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup = await actions_categories())

@router.callback_query(F.data.regexp(r'[resachviton]{6,8}-category_'))
async def subcategories(callback: CallbackQuery) -> None:
    await callback.answer()
    indx = callback.data.find('-')
    if callback.data[:indx]  ==  'research':
        cat_name, keyboard = await research_subcategories(int(callback.data.split('_')[1]), False, callback.from_user.id)
    elif callback.data[:indx]  ==  'service':
        cat_name, keyboard = await service_subcategories(int(callback.data.split('_')[1]), False, callback.from_user.id)
    elif callback.data[:indx]  ==  'action':
        cat_name, keyboard = await actions_subcategories(int(callback.data.split('_')[1]), False)
    await callback.message.edit_text(f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{cat_name}</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:', parse_mode = 'HTML')
    await callback.message.edit_reply_markup(reply_markup = keyboard)

# –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç 
# —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ (–ü–ê–ì–ò–ù–ê–¶–ò–Ø)
@router.callback_query(F.data.regexp(r'[resachviton]{6,8}-subcategory_'))
async def items(callback: CallbackQuery) -> None:
    await callback.answer()
    page = 1
    indx = callback.data.find('-')
    cat_name = callback.message.text[11:callback.message.text.find('\n')]
    if callback.data[:indx]  ==  'research':
        subcat_name, count, researches_dict = await researches(callback.data.split('_')[1], callback.from_user.id)
        pages_count = len(researches_dict)
        some_text = f'–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –≤ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {count}\n\n–í—ã–±—Ä–∞–≤ –∏ –Ω–∞–∂–∞–≤ –Ω–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ, –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ–º.'
        keyboards = await pagination(researches_dict, int(page), int(pages_count), callback.data[:indx])
    elif callback.data[:indx]  ==  'service':
        subcat_name, count, services_dict = await services(callback.data.split('_')[1], callback.from_user.id)
        pages_count = len(services_dict)
        some_text = f'–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —É—Å–ª—É–≥ –≤ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {count}\n\n–í—ã–±—Ä–∞–≤ –∏ –Ω–∞–∂–∞–≤ –Ω–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é —É—Å–ª—É–≥—É, –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ–π.'
        keyboards = await pagination(services_dict, int(page), int(pages_count), callback.data[:indx])
    elif callback.data[:indx]  ==  'action':
        subcat_name, count, actions_dict = await actions(callback.data.split('_')[1])
        pages_count = len(actions_dict)
        some_text = f'–ê–∫—Ü–∏–π –≤ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {count}\n\n–í—ã–±—Ä–∞–≤ –∏ –Ω–∞–∂–∞–≤ –Ω–∞ –∞–∫—Ü–∏—é, –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ–π.'
        keyboards = await pagination(actions_dict, int(page), int(pages_count), callback.data[:indx])
    await callback.message.edit_text(f'''–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{cat_name}</b>\n–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{subcat_name}</b>\n{some_text}''',
parse_mode = 'HTML')
    await callback.message.edit_reply_markup(reply_markup = keyboards)

# –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç 
@router.callback_query(F.data.startswith(('research-', 'service-', 'action-')))
async def get_research_data(callback: CallbackQuery) -> None:
    await callback.answer()
    item_get_id = callback.data.split('#')[0]
    item_id = item_get_id.split('-')[1]
    get_page = callback.data.split('#')[1]
    page_count = get_page.split('_')[0]
    page = get_page.split('_')[1]
    tg_id = callback.from_user.id
    if 'research' in callback.data:
        name, description, price, keyboard = await research_data(item_id, tg_id, page_count, page)
    elif 'service' in callback.data:
        name, price, keyboard = await service_data(item_id, tg_id, page_count, page)
    else:
        name, description, price, keyboard = await action_data(item_id, page_count, page)
    if '*' in name:
        name = name.replace('*', '"')
    res_cost = ''
    if len(str(price).split('.')[0])  ==  4:
        temp_cost = str(price).split('.')[0]
        res_cost = temp_cost[:1]+' '+temp_cost[1:]
    elif len(str(price).split('.')[0])  ==  5:
        temp_cost = str(price).split('.')[0]
        res_cost = temp_cost[:2]+' '+temp_cost[2:]
    else: res_cost = str(price).split('.')[0]
    if 'research' in callback.data:
        await callback.message.edit_text(f'<b>{name}</b>\n\n<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n\n<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:</b> {res_cost} ‚ÇΩ',parse_mode = 'HTML')
    elif 'service' in callback.data:
        await callback.message.edit_text(f'<b>{name}</b>\n\n<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π —É—Å–ª—É–≥–∏:</b> {res_cost} ‚ÇΩ', parse_mode = 'HTML')
    else:
        await callback.message.edit_text(f'<b>{name}</b>\n\n<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n\n<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ü–∏–∏:</b> {res_cost} ‚ÇΩ', parse_mode = 'HTML')
    
    await callback.message.edit_reply_markup(reply_markup = keyboard)

# –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (–∏–∑ –∫–æ—Ä–∑–∏–Ω—ã)        
@router.callback_query(F.data  ==  'place_an_order')
async def place_an_order_qconfirm(callback: CallbackQuery):
    await callback.answer()
    await callback.message.delete()
    # await callback.message.edit_text()
    await callback.message.answer_document(send_file('files\\personal_data_agreement.pdf'), 
                                            reply_markup = await default_keyboard_builder(
                                                text = ['‚úÖ–°–æ–≥–ª–∞—à–∞—é—Å—å','‚ùå–ù–µ —Å–æ–≥–ª–∞—à–∞—é—Å—å'], 
                                                callback_data = ['agree_place_an_order', 'disagree_place_an_order']), 
                                            caption = '–í—ã —Å–æ–≥–ª–∞—Å–Ω—ã –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö?', protect_content = True
                                        )
    
    
@router.callback_query(F.data.regexp(r'\b[sid]{,3}agree_\w{14}'))
async def place_an_order_confirm(callback: CallbackQuery):
    await callback.answer()
    if 'dis' in callback.data:
        await callback.message.edit_caption(inline_message_id = callback.inline_message_id, 
                                                caption = '–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.\n–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–æ –æ–Ω –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –∞–Ω–æ–Ω–∏–º–Ω–æ, —Ç–∞–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –≤—Ä–∞—á–∏ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç.', 
                                                reply_markup = await default_keyboard_builder(
                                                    text = ['–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å','–û—Ç–º–µ–Ω–∞'], 
                                                    callback_data = ['continue_place_an_order','cancle_place_an_order_comfirm']
                                                )   
                                            )        
    else:
        while True:
            digits = random.sample('1234567890', 9)
            order_num = await get_order_number(''.join(digits))
            if order_num: break
        text = await get_cart_buttons(callback.from_user.id, get_text = True)
        # await callback.message.edit_reply_markup(reply_markup = None)
        await callback.message.edit_caption(inline_message_id = callback.inline_message_id, caption = '–í—ã –¥–∞–ª–∏ —Å–≤–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.',
                                            reply_markup = None)
        await callback.message.answer(f'–í–∞—à –∑–∞–∫–∞–∑ <b>‚Ññ{"".join(digits)}</b>:\n{text}', parse_mode = 'HTML')
        await callback.message.answer('–ö–∞–∫–∏–º —Å–ø–æ—Å–æ–±–æ–º —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É?', reply_markup = await get_payment_buttons(''.join(digits), 0))

@router.callback_query(F.data.startswith(('continue_place','cancle_place')))   
async def place_an_order_continue(callback: CallbackQuery):
    await callback.answer()
    if 'continue' in callback.data:
        while True:
            digits = random.sample('1234567890', 9)
            order_num = await get_order_number(''.join(digits))
            if order_num: break
        await callback.message.edit_reply_markup(reply_markup = None)
        await callback.message.answer('–ö–∞–∫–∏–º —Å–ø–æ—Å–æ–±–æ–º —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É?', reply_markup = await get_payment_buttons(''.join(digits), 1))
    else:
        await callback.message.edit_reply_markup(reply_markup = None)
        await callback.message.answer(f'–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ (–∑–∞–∫–∞–∑ <b>–Ω–µ —É–¥–∞–ª–µ–Ω</b>), —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ <i>–ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É</i>.', parse_mode = 'HTML')
        
# –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É "–Ω–∞–∑–∞–¥" –∏ –≤–µ—Ä–Ω—É–ª—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º 
@router.callback_query(F.data.regexp(r'back_[resachviton]{6,8}_categories'))
async def back_categories(callback: CallbackQuery) -> None:
    await callback.answer()
    if callback.data.split('_')[1]  ==  'research':
        await callback.message.edit_text('üíâ–òc—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:')
        await callback.message.edit_reply_markup(reply_markup = await research_categories(callback.from_user.id))
    elif callback.data.split('_')[1]  ==  'service':
        await callback.message.edit_text('üßë‚Äç‚öïÔ∏è–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —É—Å–ª—É–≥–∏\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:')
        await callback.message.edit_reply_markup(reply_markup = await service_categories(callback.from_user.id))
    elif callback.data.split('_')[1]  ==  'action':
        await callback.message.edit_text('üõçÔ∏è–ê–∫—Ü–∏–∏\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:')
        await callback.message.edit_reply_markup(reply_markup = await actions_categories())
        
# –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ (–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏–ª–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —É—Å–ª—É–≥–∏)
@router.callback_query(F.data  ==  'exit_to_research_or_service')
async def exit_to_research_or_service(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text('–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏–ª–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —É—Å–ª—É–≥–∏?\n–î–ª—è –ø–æ–∏—Å–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è/—É—Å–ª—É–≥–∏.')
    await callback.message.edit_reply_markup(reply_markup = await default_keyboard_builder(
                                                    text = ['üíâ–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è', 'üßë‚Äç‚öïÔ∏è–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —É—Å–ª—É–≥–∏', 'üõçÔ∏è–ê–∫—Ü–∏–∏', '‚è™–ü–æ–∫–∏–Ω—É—Ç—å –º–µ–Ω—é'], 
                                                    callback_data = ['researches', 'services', 'actions', 'exit_or_exit'], 
                                                    sizes = 1
                                                )
                                            )

# –≤—ã—Ö–æ–¥ –∏–∑ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ (–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏–ª–º –∏–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —É—Å–ª—É–≥–∏)
@router.callback_query(F.data.in_(['exit_or_exit', 'cart_exit', 'pag_exit', 'orders_stop_back']))
async def exit_or_exit(callback: CallbackQuery) -> None:
    await callback.answer()
    await callback.message.edit_reply_markup(reply_markup = None)
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –Ω–∏–∂–Ω–µ–≥–æ –º–µ–Ω—é.')


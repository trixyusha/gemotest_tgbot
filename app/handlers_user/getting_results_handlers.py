import re
from time import monotonic

from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.methods.delete_message import DeleteMessage
# from aiogram.types.input_file import BufferedInputFile as send_buffer

from app.handlers_user.main_handlers import router
from app.database.requests.main_requests import get_hash_data, set_user
from ..keyboards_user.default_keyboard import default_keyboard_builder

from app.send_sms import SMSC
from app.send_sms import get_kod as code



class Confirm_Number(StatesGroup):
    p_number = State()
    confirm_code = State()
    time = State()
    resend = State()

# –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –¥–æ–∫—É–º–µ–Ω—Ç —Å —Å–æ–≥–ª–∞—Å–∏–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ "—Å–æ–≥–ª–∞—à–∞—é—Å—å" –∏ "–Ω–µ —Å–æ–≥–ª–∞—à–∞—é—Å—å"
@router.callback_query(F.data.regexp(r'\b[sid]{,3}agree\b'))
async def activate_the_service_disagree(callback: CallbackQuery, state: FSMContext) -> None:
    if 'dis' in callback.data:
        await callback.answer()
        await callback.message.answer('–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ª—É–≥–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.')
        try:
            return DeleteMessage(chat_id = callback.message.chat.id, message_id = callback.message.message_id)
        except: pass
    else:
        await state.set_state(Confirm_Number.p_number)
        await callback.answer()
        await callback.message.edit_caption(callback.inline_message_id,'–í—ã –¥–∞–ª–∏ —Å–≤–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!',
                                            reply_markup = None)
        await callback.message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å —É—Å–ª—É–≥—É <b>"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –≤ Telegram"</b>.', 
                                        parse_mode = 'HTML', 
                                        reply_markup =  await default_keyboard_builder(
                                            text = 'üì±–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
                                            sizes = 1,
                                            request_cont = True,
                                            resize_keyboard = True,
                                            input_field_placeholder = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞...'
                                        )
                                    )

# –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞    
@router.message(Confirm_Number.p_number, F.contact)
@router.message(Confirm_Number.p_number, F.text.regexp(r'\d+'))
async def get_contact(message: Message, state: FSMContext) -> None:
    smsc = SMSC()
    ccode = code()
    sms_text = f'–ù–∏–∫–æ–º—É –Ω–µ –≥–æ–≤–æ—Ä–∏—Ç–µ –∫–æ–¥ {ccode}! –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ –±–æ—Ç–µ https://t.me/GemotestLaboratory_Bot.'
    # cost = smsc.get_sms_cost(message.contact.phone_number[1:], sms_text)
    # print(re.findall(r'^(\+7|7|8)?[\s\-]?\(?[489][0-9]{2}\)?[\s\-]?[0-9]{3}[\s\-]?[0-9]{2}[\s\-]?[0-9]{2}$', message.contact.phone_number))
    if message.contact:
        if '+' in message.contact.phone_number:
            await state.update_data(p_number = message.contact.phone_number[1:])
            # smsc.send_sms(message.contact.phone_number[1:], sms_text)
            start_time = monotonic()
            print(f'\n\nPHONE NUMBER {message.contact.phone_number[1:]}\n-----------\nTEXT\n{sms_text}\n-----------\n\n')
            await state.set_state(Confirm_Number.confirm_code)
            await state.update_data(confirm_code = ccode, time = start_time)
        else:
            await state.update_data(p_number = message.contact.phone_number)
            # smsc.send_sms(message.contact.phone_number, sms_text)
            start_time = monotonic()
            print(f'\n\nTIME {start_time}\n-----------\nPHONE NUMBER {message.contact.phone_number}\n-----------\nTEXT\n{sms_text}\n-----------\n\n')
            await state.set_state(Confirm_Number.confirm_code)
            await state.update_data(confirm_code = ccode, time = start_time)
        # –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç, –ø–æ—Å–ª–µ —á–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ª—É–≥–∏ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.
    elif message.text:
        if bool(re.match(r'^(\+7|8)\s?\(?9[0-9]{2}\)?\s?((\s|-)?[0-9]){7}', message.text)):
            await state.update_data(p_number = message.text)
            # smsc.send_sms(message.contact.phone_number, sms_text)
            start_time = monotonic()
            print(f'\n\nTIME {start_time}\n-----------\nPHONE NUMBER {message.text}\n-----------\nTEXT\n{sms_text}\n-----------\n\n')
            await state.set_state(Confirm_Number.confirm_code)
            await state.update_data(confirm_code = ccode, time = start_time)
        else: 
            await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"</b>', parse_mode = 'HTML')
            await state.get_state(Confirm_Number.p_number)
    await message.answer('''–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –≤–∞–º –ø—Ä–∏–¥–µ—Ç –∫–æ–¥ –≤ SMS-—Å–æ–æ–±—â–µ–Ω–∏–∏, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —ç—Ç–æ—Ç —á–∞—Ç.
–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.''', reply_markup = ReplyKeyboardRemove())
    try:
        return DeleteMessage(chat_id = message.chat.id, message_id = message.message_id)
    except: pass


# –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –µ–º—É –±—ã–ª –≤—ã—Å–ª–∞–Ω –≤ —Å–º—Å —Å–æ–æ–±—â–µ–Ω–∏–∏    
@router.message(Confirm_Number.confirm_code)
async def confirmation(message: Message, state: FSMContext) -> None:
    data = await state.get_data()
    if monotonic() - data['time'] < float(15*60): # 15*60
        print(f'\n\nNEW IF TIME {monotonic()-data["time"]}\n\n')
        if data['confirm_code']  ==  message.text:
            await message.answer('–£—Å–ª—É–≥–∞ <b>"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –≤ Telegram"</b> –ø–æ–¥–∫–ª—é—á–µ–Ω–∞!', parse_mode = 'HTML', 
                                    reply_markup = await default_keyboard_builder(
                                        text = ['üìù–û—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–∫–∞–∑','üõí–ö–æ—Ä–∑–∏–Ω–∞','üßæ–ó–∞–∫–∞–∑—ã','‚öôÔ∏è–ü–æ–º–æ—â—å','‚ùå–û—Ç–∫–ª—é—á–∏—Ç—å—Å—è –æ—Ç —É—Å–ª—É–≥–∏'],
                                        sizes = [1,2,1,1],
                                        input_field_placeholder = '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é...',
                                        resize_keyboard = True
                                    )
                                )
            await set_user(message.from_user.id, phone_number = get_hash_data(data['p_number']))
            await state.clear()
        else:
            await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –≤–≤–æ–¥–∞.', reply_markup = None)
    else:
        await message.answer('''15 –º–∏–Ω—É—Ç –ø—Ä–æ—à–ª–æ, –∫–æ–¥ –±–æ–ª—å—à–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º.
–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ?''', reply_markup = await default_keyboard_builder(text = ['–î–∞', '–ù–µ—Ç'], callback_data = ['yes_resend', 'no_resend']))
        await state.set_state(Confirm_Number.resend)

# –∫–æ–¥ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
@router.callback_query(Confirm_Number.resend, F.data.regexp(r'\w{2,3}_resend'))
async def re_sending_code(callback: CallbackQuery, state: FSMContext):
    if 'no' in callback.data:
        await callback.answer()
        await callback.message.answer('–£—Å–ª—É–≥–∞ <b>"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –≤ Telegram"</b> –Ω–µ –±—ã–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞.', parse_mode = 'HTML', reply_markup = await default_keyboard_builder(
                                text = ['üìù–û—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–∫–∞–∑','üõí–ö–æ—Ä–∑–∏–Ω–∞','üßæ–ó–∞–∫–∞–∑—ã','‚öôÔ∏è–ü–æ–º–æ—â—å','üÜï–ü–æ–¥–∫–ª—é—á–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤'],
                                sizes = [1,2,1,1],
                                input_field_placeholder = '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é...',
                                resize_keyboard = True
                            ))
        await state.clear()
        try:
            return DeleteMessage(chat_id = callback.message.chat.id, message_id = callback.message.message_id)
        except: pass
    elif 'yes' in callback.data:
        smsc = SMSC()
        ccode = code()
        sms_text = f'–ù–∏–∫–æ–º—É –Ω–µ –≥–æ–≤–æ—Ä–∏—Ç–µ –∫–æ–¥ {ccode}! –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ –±–æ—Ç–µ https://t.me/GemotestLaboratory_Bot.'
        data = await state.get_data()
        await callback.answer()
        start_time = monotonic()
        print(f'\n\nPHONE NUMBER {data["p_number"]}\n-----------\nTEXT\n{sms_text}\n-----------\n\n')
        await state.set_state(Confirm_Number.confirm_code)
        await state.update_data(confirm_code = ccode, time = start_time)
        await callback.message.edit_text('–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ. –û–Ω —Ç–∞–∫–∂–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 15 –º–∏–Ω—É—Ç.', reply_markup = None)
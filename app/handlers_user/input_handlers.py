from aiogram.types import Message
from aiogram.types.input_file import InputFile as send_file

import app.functions as funcs
import app.database.requests.main_requests as request
from .view_orders_handlers import orders_pagination
from ..filters.symbol_or_letter import MessageMatch
import app.keyboards_user.default_keyboard as def_keyboard
from app.keyboards_admin.inline.inline_keyboards import help_button
from app.keyboards_user.inline import researches_keyboard, services_keyboard, order_cart_keyboard

from app.handlers_user.main_handlers import router

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫
@router.message(MessageMatch(['–ø–æ–¥–∫–ª—é—á–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤', '–ø–æ–¥–∫–ª—é—á–∏—Ç—å —É—Å–ª—É–≥—É', '–ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤']))
async def activate_the_service(message: Message) -> None:
    user, phone = await request.set_user(message.from_user.id)
    if not phone:
        await message.answer_document(send_file('files\\personal_data_agreement.pdf'), 
                                        reply_markup = await def_keyboard.default_keyboard_builder(
                                            text = ['‚úÖ–°–æ–≥–ª–∞—à–∞—é—Å—å','‚ùå–ù–µ —Å–æ–≥–ª–∞—à–∞—é—Å—å'], 
                                            callback_data = ['agree', 'disagree']
                                        ), 
                                        caption = '–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–≤—É—Ö—ç—Ç–∞–ø–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é (<b>–æ–±–ª–∞—á–Ω—ã–π –ø–∞—Ä–æ–ª—å</b>) –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.\n\n–í—ã —Å–æ–≥–ª–∞—Å–Ω—ã –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö?', 
                                        protect_content = True, parse_mode = 'HTML'
                                    )
    else: await message.answer('–í—ã —É–∂–µ –ø–æ–¥–∫–ª—é—á–∏–ª–∏ —É—Å–ª—É–≥—É.')
# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫
@router.message(MessageMatch(['–æ—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–∫–∞–∑', '–æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', '–æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É', '–æ—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –∑–∞—è–≤–∫—É']))
async def researches_or_services(message: Message) -> None:
    await message.answer('–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏–ª–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —É—Å–ª—É–≥–∏?\n–î–ª—è –ø–æ–∏—Å–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è/—É—Å–ª—É–≥–∏.', 
                            reply_markup = await def_keyboard.default_keyboard_builder(
                                    text = ['üíâ–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è', 'üßë‚Äç‚öïÔ∏è–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —É—Å–ª—É–≥–∏', 'üõçÔ∏è–ê–∫—Ü–∏–∏', '‚è™–ü–æ–∫–∏–Ω—É—Ç—å –º–µ–Ω—é'], 
                                    callback_data = ['researches', 'services', 'actions', 'exit_or_exit'], sizes = 1
                            )
                        )
# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(MessageMatch(['–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è', '—Å–¥–∞—Ç—å –∞–Ω–∞–ª–∏–∑—ã', '–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ', '—Å–¥–∞—Ç—å –∞–Ω–∞–ª–∏–∑', '–ø—Ä–æ–π—Ç–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ']))
async def researches_categories(message: Message) -> None:
    await message.answer('üíâ–òc—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', 
                            reply_markup = await researches_keyboard.research_categories(message.from_user.id)
                        )
# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(MessageMatch(['–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —É—Å–ª—É–≥–∏', '—É—Å–ª—É–≥–∏', '–º–µ–¥—É—Å–ª—É–≥–∏', '–º–µ–¥ —É—Å–ª—É–≥–∏', '–º–µ–¥. —É—Å–ª—É–≥–∏', '–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —É—Å–ª—É–≥–∞', '—É—Å–ª—É–≥–∞', '–º–µ–¥—É—Å–ª—É–≥–∞', '–º–µ–¥. —É—Å–ª—É–≥–∞', '–º–µ–¥ —É—Å–ª—É–≥–∞']))
async def services_categories(message: Message) -> None:
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', 
                            reply_markup = await services_keyboard.service_categories(message.from_user.id)
                        )
# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫
@router.message(MessageMatch(['–ø–æ–º–æ—â—å', 'help', '–ø–æ–º–æ–≥–∏', '–ø–æ–º–æ–≥–∏—Ç–µ']))
async def cmd_help(message: Message) -> None:
    user, phone = await request.set_user(message.from_user.id)
    if phone  ==  True:
    # –¥–æ—Å—Ç–∞–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –ø–∞—Ü–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω, —Ç.–µ. –µ–º—É –ø—Ä–∏—Ö–æ–¥—è—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–æ–≤ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–∞–∫–æ–µ –∫–∞–∫ —Å–µ–π—á–∞—Å
        await message.answer('''*_–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –±–æ—Ç—É\._*\n–ö–æ–≥–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–æ–≤ –±—É–¥—É—Ç –≥–æ—Ç–æ–≤—ã, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∏—Ö –≤ —ç—Ç–æ–º —á–∞—Ç–µ\.
–ï—Å–ª–∏ –∞–Ω–∞–ª–∏–∑–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –ø–æ –º–µ—Ä–µ –∏—Ö –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏\.\n
–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –Ω–∞–∂–º–∏—Ç–µ *"–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤"*\.\n
–ï—Å–ª–∏ –≤—ã –±–æ–ª—å—à–µ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –≤ Telegram, –Ω–∞–∂–º–∏—Ç–µ *"–û—Ç–∫–ª—é—á–∏—Ç—å—Å—è –æ—Ç —É—Å–ª—É–≥–∏"*\.''', 
parse_mode = 'MarkdownV2', reply_markup = help_button)
    else:
        await message.answer('''*_–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã\._*\n
–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –≤ Telegram, –Ω–∞–∂–º–∏—Ç–µ *"–ü–æ–¥–∫–ª—é—á–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"*\.''', 
parse_mode = 'MarkdownV2', reply_markup = help_button)
# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫
@router.message(MessageMatch(['–æ—Ç–∫–ª—é—á–∏—Ç—å—Å—è –æ—Ç —É—Å–ª—É–≥–∏', '–æ—Ç–∫–ª—é—á–∏—Ç—å —É—Å–ª—É–≥—É', '–æ—Ç–∫–ª—é—á–∏—Ç—å—Å—è', '–æ—Ç–∫–ª—é—á–∏—Ç—å']))
async def exit_button(message: Message) -> None:
    disconnect = await request.disconnect_user(message.from_user.id)
    if disconnect:
        await message.answer('–í—ã –æ—Ç–∫–ª—é—á–∏–ª–∏—Å—å –æ—Ç —É—Å–ª—É–≥–∏.', 
                                reply_markup = await def_keyboard.default_keyboard_builder(
                                    text = ['üìù–û—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–∫–∞–∑','üõí–ö–æ—Ä–∑–∏–Ω–∞','üßæ–ó–∞–∫–∞–∑—ã','‚öôÔ∏è–ü–æ–º–æ—â—å','üÜï–ü–æ–¥–∫–ª—é—á–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤'],
                                    sizes = [1,2,1,1],
                                    input_field_placeholder = '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é...',
                                    resize_keyboard = True
                                )
                            )
    else: await message.answer('–û—à–∏–±–∫–∞! –í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —É—Å–ª—É–≥–µ.', 
                                reply_markup = await def_keyboard.default_keyboard_builder(
                                    text = ['üìù–û—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–∫–∞–∑','üõí–ö–æ—Ä–∑–∏–Ω–∞','üßæ–ó–∞–∫–∞–∑—ã','‚öôÔ∏è–ü–æ–º–æ—â—å','üÜï–ü–æ–¥–∫–ª—é—á–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤'],
                                    sizes = [1,2,1,1],
                                    input_field_placeholder = '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é...',
                                    resize_keyboard = True
                                )
                            )
# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫
@router.message(MessageMatch(['–∫–æ—Ä–∑–∏–Ω–∞', '–∫–æ—Ä–∑–∏–Ω–∫–∞', 'cart']))
async def cart(message: Message) -> None:
    # cart = await request.get_cart(message.from_user.id)
    out_text, keyboard = await order_cart_keyboard.get_cart_buttons(message.from_user.id, message_cart = True)
    if keyboard:
        await message.answer(f'<b>–í–∞—à –∑–∞–∫–∞–∑:</b>\n{out_text}', parse_mode = 'HTML', reply_markup = keyboard)
    else:
        await message.answer('<i><b>–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.</b></i>\n\n–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é —É—Å–ª—É–≥—É –≤ –∫–æ—Ä–∑–∏–Ω—É, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é <b>"–û—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–∫–∞–∑"</b>.',
                                parse_mode = 'HTML'
                            )

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ (–≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤)
@router.message(MessageMatch(['–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑','–º–æ–π –∑–∞–∫–∞–∑','–∑–∞–∫–∞–∑—ã','–º–æ–∏ –∑–∞–∫–∞–∑—ã', '–∏—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤']))
async def orders(message: MessageMatch) -> None:
    page = 1
    count, orders_dict = await funcs.orders(message.from_user.id)
    if orders_dict:
        pages_count = len(orders_dict)
        keyboards = await orders_pagination(orders_dict, int(page), int(pages_count))
        if count  ==  1: t = '–í–∞—à –∑–∞–∫–∞–∑'
        else: t = '–í–∞—à–∏ –∑–∞–∫–∞–∑—ã'
        await message.answer(f'{t} ({count}):', reply_markup = keyboards)
    else: await message.answer(f'''–í—ã –ø–æ–∫–∞ –Ω–µ –æ—Ñ–æ—Ä–º–ª—è–ª–∏ –∑–∞–∫–∞–∑—ã.\n
–ß—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É <b>"–û—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–∫–∞–∑"</b>, –ª–∏–±–æ <b>"–ö–æ—Ä–∑–∏–Ω–∞"</b>.''', 
parse_mode = 'HTML')

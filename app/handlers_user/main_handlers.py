import os
# from math import ceil
# import re
from dotenv import load_dotenv
# from contextlib import suppress

import random
from aiogram import F, Bot, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.methods.delete_message import DeleteMessage
# from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
# from aiogram.types import FSInputFile as send_file
from aiogram.fsm.state import StatesGroup, State
# from aiogram.fsm.context import FSMContext
# from aiogram.types import LabeledPrice, PreCheckoutQuery
# from aiogram.exceptions import TelegramBadRequest
# from aiogram.types.input_file import InputFile as send_file
from aiogram.types.input_file import BufferedInputFile as send_buffer

from app.keyboards_admin.inline.inline_keyboards import get_button
# import app.keyboards as kb
# import app.database.main_requests as request
# from ..filters.symbol_or_letter import MessageMatch
from hashlib import sha256
# from time import monotonic

# from app.send_sms import SMSC
# from app.send_sms import get_kod as code

from app.keyboards_user.default_keyboard import default_keyboard_builder
from app.keyboards_user.inline.cities_keyboard import cities
from app.database.requests.main_requests import set_user, get_hashid_card, get_QR_code


load_dotenv()
router = Router()

GET_QR_TEXT = '''–≠—Ç–æ <b>–≤–∞—à QR-–∫–æ–¥</b>.\n–û–Ω —Ö—Ä–∞–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–º –∑–∞–∫–∞–∑–µ –∏ –≤–∞—à TelegramID.\n
–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ –µ–≥–æ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, —á—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å —É—Å–ª—É–≥—É <b>"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –≤ Telegram"</b> –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.'''
GET_QR_TEXT_CONNECT = '–≠—Ç–æ <b>–≤–∞—à QR-–∫–æ–¥</b> (–∫–∞—Ä—Ç–æ—á–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞).\n–£—Å–ª—É–≥–∞ "–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –≤ Telegram" –ø–æ–¥–∫–ª—é—á–µ–Ω–∞.\n\n–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ –µ–≥–æ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.'
GET_QR_TEXT_DISCONNECT = '''–í—ã –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª–∏ —É—Å–ª—É–≥—É <b>"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –≤ Telegram"</b>.\n
–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å QR-–∫–æ–¥, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑. –í —ç—Ç–æ—Ç —á–∞—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω <b>–≤—Ä–µ–º–µ–Ω–Ω—ã–π</b> QR-–∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ü–æ—Å–ª–µ –ø—Ä–æ–¥–µ–ª–∞–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π, –≤–∞–º –ø—Ä–∏–¥–µ—Ç –Ω–æ–≤—ã–π –∏ —É–∂–µ <b>–ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π</b> QR-–∫–æ–¥, –∞ —É—Å–ª—É–≥–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
\n–ï—Å–ª–∏ –∂–µ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–∞—Ç—å –¥–∞–Ω–Ω—É—é —É—Å–ª—É–≥–∞, —Ç–æ –ø—Ä–æ—Å—Ç–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–π—Ç–µ QR-–∫–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'''

# class Confirm_Number(StatesGroup):
#     p_number = State()
#     confirm_code = State()
#     time = State()
#     resend = State()

class ConfirmPlaceAnOrder(StatesGroup):
    confirm = State()
    not_confirm = State()

def get_hash_data(data):
    return sha256(data.encode("utf-8")).hexdigest()


# –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –∫–æ–º–∞–Ω–¥—É —Å—Ç–∞—Ä—Ç
@router.message(CommandStart())
async def cmd_start(message: Message, bot: Bot) -> None:
    
    await bot.send_message(chat_id = os.getenv('MAIN_ADMIN_ID'), text = f'''‚ùó<b><i>–ó–∞—à–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</i></b>‚ùó\nusername: @{message.from_user.username}
id: <code>{message.from_user.id}</code>\nfullname: <code>{message.from_user.full_name}</code>\n''', 
reply_markup = await get_button(message.from_user.id), parse_mode = 'HTML')
    
    
    user, phone = await set_user(message.from_user.id)
    if user:
        if phone:
            await message.answer(f'–†–∞–¥—ã —Å–Ω–æ–≤–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å, {message.from_user.first_name}! –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é.', 
                                    reply_markup = await default_keyboard_builder(
                                        text = ['üìù–û—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–∫–∞–∑','üõí–ö–æ—Ä–∑–∏–Ω–∞','üßæ–ó–∞–∫–∞–∑—ã','‚öôÔ∏è–ü–æ–º–æ—â—å','‚ùå–û—Ç–∫–ª—é—á–∏—Ç—å—Å—è –æ—Ç —É—Å–ª—É–≥–∏'],
                                        sizes = [1,2,1,1],
                                        input_field_placeholder = '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é...',
                                        resize_keyboard = True
                                    )
                                )
        else:
            await message.answer(f'–†–∞–¥—ã —Å–Ω–æ–≤–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å, {message.from_user.first_name}! –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é.', 
                                    reply_markup = await default_keyboard_builder(
                                        text = ['üìù–û—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–∫–∞–∑','üõí–ö–æ—Ä–∑–∏–Ω–∞','üßæ–ó–∞–∫–∞–∑—ã','‚öôÔ∏è–ü–æ–º–æ—â—å','üÜï–ü–æ–¥–∫–ª—é—á–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤'],
                                        sizes = [1,2,1,1],
                                        input_field_placeholder = '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é...',
                                        resize_keyboard = True
                                    )
                                )
    else:
        await message.answer(f'–≠—Ç–æ –±–æ—Ç –ì–µ–º–æ—Ç–µ—Å—Ç –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π. {message.from_user.first_name}, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:', 
                                reply_markup = await cities()
                            )

@router.message(Command('get_qrcode'))
async def get_qrcode(message: Message):
    hashid_card = await get_hashid_card(message.from_user.id)
    if hashid_card:
        qr_code = await get_QR_code(message.from_user.id, hashid_card, dont_need_bool=True)
        await message.answer_photo(send_buffer(qr_code.getvalue(), f'qrcode_{message.from_user.id}.png'), caption=GET_QR_TEXT_CONNECT, protect_content=True, parse_mode='HTML')
    else: await message.answer(GET_QR_TEXT_DISCONNECT, parse_mode='HTML')

# –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≥–æ—Ä–æ–¥ (–ø–æ—è–≤–ª—è–µ—Ç—Å—è, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–Ω–µ–µ –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª –±–æ—Ç–∞)
@router.callback_query(F.data.startswith('city_'))
async def enter_city(callback: CallbackQuery) -> None:
    await set_user(callback.from_user.id, callback.from_user.username, callback.data.split('_')[1])
    await callback.answer()
    await callback.message.answer(f'–†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å, {callback.from_user.first_name}! –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é.', 
                                    reply_markup = await default_keyboard_builder(
                                        text = ['üìù–û—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–∫–∞–∑','üõí–ö–æ—Ä–∑–∏–Ω–∞','üßæ–ó–∞–∫–∞–∑—ã','‚öôÔ∏è–ü–æ–º–æ—â—å','üÜï–ü–æ–¥–∫–ª—é—á–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤'],
                                        sizes = [1,2,1,1],
                                        input_field_placeholder = '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é...',
                                        resize_keyboard = True
                                    )
                                )
    try:
        return DeleteMessage(chat_id = callback.message.chat.id, message_id = callback.message.message_id)
    except: pass


# @router.callback_query(F.data.regexp(r'\b[sid]{,3}agree\b'))
# async def activate_the_service_disagree(callback: CallbackQuery, state: FSMContext) -> None:
#     if 'dis' in callback.data:
#         await callback.answer()
#         await callback.message.answer('–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ª—É–≥–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.')
#         try:
#             return DeleteMessage(chat_id = callback.message.chat.id, message_id = callback.message.message_id)
#         except: pass
#     else:
#         await state.set_state(Confirm_Number.p_number)
#         await callback.answer()
#         await callback.message.edit_caption(callback.inline_message_id,'–í—ã –¥–∞–ª–∏ —Å–≤–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!',
#                                             reply_markup = None)
#         await callback.message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å —É—Å–ª—É–≥—É <b>"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –≤ Telegram"</b>.', 
#                                         parse_mode = 'HTML', 
#                                         reply_markup =  await kb.default_keyboard_builder(
#                                             text = 'üì±–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
#                                             sizes = 1,
#                                             request_cont = True,
#                                             resize_keyboard = True,
#                                             input_field_placeholder = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞...'
#                                         )
#                                     )

# # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞    
# @router.message(Confirm_Number.p_number, F.contact)
# @router.message(Confirm_Number.p_number, F.text.regexp(r'\d+'))
# async def get_contact(message: Message, state: FSMContext) -> None:
#     smsc = SMSC()
#     ccode = code()
#     sms_text = f'–ù–∏–∫–æ–º—É –Ω–µ –≥–æ–≤–æ—Ä–∏—Ç–µ –∫–æ–¥ {ccode}! –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ –±–æ—Ç–µ https://t.me/GemotestLaboratory_Bot.'
#     # –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
#     # cost = smsc.get_sms_cost(message.contact.phone_number[1:], sms_text)
#     # print(re.findall(r'^(\+7|7|8)?[\s\-]?\(?[489][0-9]{2}\)?[\s\-]?[0-9]{3}[\s\-]?[0-9]{2}[\s\-]?[0-9]{2}$', message.contact.phone_number))
#     if message.contact:
#         if '+' in message.contact.phone_number:
#             await state.update_data(p_number = message.contact.phone_number[1:])
#             # smsc.send_sms(message.contact.phone_number[1:], sms_text)
#             start_time = monotonic()
#             print(f'\n\nPHONE NUMBER {message.contact.phone_number[1:]}\n-----------\nTEXT\n{sms_text}\n-----------\n\n')
#             await state.set_state(Confirm_Number.confirm_code)
#             await state.update_data(confirm_code = ccode, time = start_time)
#         else:
#             await state.update_data(p_number = message.contact.phone_number)
#             # smsc.send_sms(message.contact.phone_number, sms_text)
#             start_time = monotonic()
#             print(f'\n\nTIME {start_time}\n-----------\nPHONE NUMBER {message.contact.phone_number}\n-----------\nTEXT\n{sms_text}\n-----------\n\n')
#             await state.set_state(Confirm_Number.confirm_code)
#             await state.update_data(confirm_code = ccode, time = start_time)
#         # –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç, –ø–æ—Å–ª–µ —á–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ª—É–≥–∏ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.
#     elif message.text:
#         if bool(re.match(r'^(\+7|8)\s?\(?9[0-9]{2}\)?\s?((\s|-)?[0-9]){7}', message.text)):
#             await state.update_data(p_number = message.text)
#             # smsc.send_sms(message.contact.phone_number, sms_text)
#             start_time = monotonic()
#             print(f'\n\nTIME {start_time}\n-----------\nPHONE NUMBER {message.text}\n-----------\nTEXT\n{sms_text}\n-----------\n\n')
#             await state.set_state(Confirm_Number.confirm_code)
#             await state.update_data(confirm_code = ccode, time = start_time)
#         else: 
#             await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"</b>', parse_mode = 'HTML')
#             await state.get_state(Confirm_Number.p_number)
#     await message.answer('''–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –≤–∞–º –ø—Ä–∏–¥–µ—Ç –∫–æ–¥ –≤ SMS-—Å–æ–æ–±—â–µ–Ω–∏–∏, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —ç—Ç–æ—Ç —á–∞—Ç.
# –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.''', reply_markup = ReplyKeyboardRemove())
#     try:
#         return DeleteMessage(chat_id = message.chat.id, message_id = message.message_id)
#     except: pass

# # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –µ–º—É –±—ã–ª –≤—ã—Å–ª–∞–Ω –≤ —Å–º—Å —Å–æ–æ–±—â–µ–Ω–∏–∏    
# @router.message(Confirm_Number.confirm_code)
# async def confirmation(message: Message, state: FSMContext) -> None:
#     data = await state.get_data()
#     if monotonic() - data['time'] < float(15*60): # 15*60
#         print(f'\n\nNEW IF TIME {monotonic()-data["time"]}\n\n')
#         if data['confirm_code']  ==  message.text:
#             await message.answer('–£—Å–ª—É–≥–∞ <b>"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –≤ Telegram"</b> –ø–æ–¥–∫–ª—é—á–µ–Ω–∞!', parse_mode = 'HTML', 
#                                     reply_markup = await kb.default_keyboard_builder(
#                                         text = ['üìù–û—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–∫–∞–∑','üõí–ö–æ—Ä–∑–∏–Ω–∞','üßæ–ó–∞–∫–∞–∑—ã','‚öôÔ∏è–ü–æ–º–æ—â—å','‚ùå–û—Ç–∫–ª—é—á–∏—Ç—å—Å—è –æ—Ç —É—Å–ª—É–≥–∏'],
#                                         sizes = [1,2,1,1],
#                                         input_field_placeholder = '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é...',
#                                         resize_keyboard = True
#                                     )
#                                 )
#             await request.set_user(message.from_user.id, phone_number = get_hash_data(data['p_number']))
#             await state.clear()
#         else:
#             await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –≤–≤–æ–¥–∞.', reply_markup = None)
#     else:
#         await message.answer('''15 –º–∏–Ω—É—Ç –ø—Ä–æ—à–ª–æ, –∫–æ–¥ –±–æ–ª—å—à–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º.
# –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ?''', reply_markup = await kb.default_keyboard_builder(text = ['–î–∞', '–ù–µ—Ç'], callback_data = ['yes_resend', 'no_resend']))
#         await state.set_state(Confirm_Number.resend)

# # –∫–æ–¥ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
# @router.callback_query(Confirm_Number.resend, F.data.regexp(r'\w{2,3}_resend'))
# async def re_sending_code(callback: CallbackQuery, state: FSMContext):
#     if 'no' in callback.data:
#         await callback.answer()
#         await callback.message.answer('–£—Å–ª—É–≥–∞ <b>"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –≤ Telegram"</b> –Ω–µ –±—ã–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞.', parse_mode = 'HTML', reply_markup = await kb.default_keyboard_builder(
#                                 text = ['üìù–û—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–∫–∞–∑','üõí–ö–æ—Ä–∑–∏–Ω–∞','üßæ–ó–∞–∫–∞–∑—ã','‚öôÔ∏è–ü–æ–º–æ—â—å','üÜï–ü–æ–¥–∫–ª—é—á–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤'],
#                                 sizes = [1,2,1,1],
#                                 input_field_placeholder = '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é...',
#                                 resize_keyboard = True
#                             ))
#         await state.clear()
#         try:
#             return DeleteMessage(chat_id = callback.message.chat.id, message_id = callback.message.message_id)
#         except: pass
#     elif 'yes' in callback.data:
#         smsc = SMSC()
#         ccode = code()
#         sms_text = f'–ù–∏–∫–æ–º—É –Ω–µ –≥–æ–≤–æ—Ä–∏—Ç–µ –∫–æ–¥ {ccode}! –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ –±–æ—Ç–µ https://t.me/GemotestLaboratory_Bot.'
#         data = await state.get_data()
#         await callback.answer()
#         start_time = monotonic()
#         print(f'\n\nPHONE NUMBER {data["p_number"]}\n-----------\nTEXT\n{sms_text}\n-----------\n\n')
#         await state.set_state(Confirm_Number.confirm_code)
#         await state.update_data(confirm_code = ccode, time = start_time)
#         await callback.message.edit_text('–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ. –û–Ω —Ç–∞–∫–∂–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 15 –º–∏–Ω—É—Ç.', reply_markup = None)

# # –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –∏ –∫–æ–º–∞–Ω–¥—ã)
# @router.message(Command('researches', 'services'))
# @router.callback_query(F.data.in_({'researches','services','actions', 'notice_actions'}))
# async def categories(m_or_q: Message | CallbackQuery) -> None:
#     if isinstance(m_or_q, Message):
#         if m_or_q.text  ==  '/researches':
#             await m_or_q.answer('üíâ–òc—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup = await kb.research_categories(m_or_q.from_user.id))
#         elif m_or_q.text  ==  '/services':
#             await m_or_q.answer('üßë‚Äç‚öïÔ∏è–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —É—Å–ª—É–≥–∏\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup = await kb.service_categories(m_or_q.from_user.id))
#     else:    
#         if m_or_q.data[:-2]  ==  'research':
#             await m_or_q.answer()
#             await m_or_q.message.edit_text('üíâ–òc—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:')
#             await m_or_q.message.edit_reply_markup(reply_markup = await kb.research_categories(m_or_q.from_user.id))
#         elif m_or_q.data[:-1]  ==  'service':
#             await m_or_q.answer()
#             await m_or_q.message.edit_text('üßë‚Äç‚öïÔ∏è–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —É—Å–ª—É–≥–∏\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:')
#             await m_or_q.message.edit_reply_markup(reply_markup = await kb.service_categories(m_or_q.from_user.id))
#         elif m_or_q.data[:-1]  ==  'action':
#             await m_or_q.answer()
#             await m_or_q.message.edit_text('üõçÔ∏è–ê–∫—Ü–∏–∏\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:')
#             await m_or_q.message.edit_reply_markup(reply_markup = await kb.actions_categories())
#         elif m_or_q.data  ==  'notice_actions':
#             await m_or_q.answer()
#             await m_or_q.message.answer('üõçÔ∏è–ê–∫—Ü–∏–∏\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup = await kb.actions_categories())

# @router.callback_query(F.data.regexp(r'[resachviton]{6,8}-category_'))
# async def subcategories(callback: CallbackQuery) -> None:
#     await callback.answer()
#     indx = callback.data.find('-')
#     if callback.data[:indx]  ==  'research':
#         cat_name, keyboard = await kb.research_subcategories(int(callback.data.split('_')[1]), False, callback.from_user.id)
#     elif callback.data[:indx]  ==  'service':
#         cat_name, keyboard = await kb.service_subcategories(int(callback.data.split('_')[1]), False, callback.from_user.id)
#     elif callback.data[:indx]  ==  'action':
#         cat_name, keyboard = await kb.actions_subcategories(int(callback.data.split('_')[1]), False)
#     await callback.message.edit_text(f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{cat_name}</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:', parse_mode = 'HTML')
#     await callback.message.edit_reply_markup(reply_markup = keyboard)

# # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É "–Ω–∞–∑–∞–¥" –∏ –≤–µ—Ä–Ω—É–ª—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º 
# @router.callback_query(F.data.regexp(r'back_[resachviton]{6,8}_categories'))
# async def back_categories(callback: CallbackQuery) -> None:
#     await callback.answer()
#     if callback.data.split('_')[1]  ==  'research':
#         await callback.message.edit_text('üíâ–òc—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:')
#         await callback.message.edit_reply_markup(reply_markup = await kb.research_categories(callback.from_user.id))
#     elif callback.data.split('_')[1]  ==  'service':
#         await callback.message.edit_text('üßë‚Äç‚öïÔ∏è–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —É—Å–ª—É–≥–∏\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:')
#         await callback.message.edit_reply_markup(reply_markup = await kb.service_categories(callback.from_user.id))
#     elif callback.data.split('_')[1]  ==  'action':
#         await callback.message.edit_text('üõçÔ∏è–ê–∫—Ü–∏–∏\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:')
#         await callback.message.edit_reply_markup(reply_markup = await kb.actions_categories())
    
# # –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç 
# # —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ (–ü–ê–ì–ò–ù–ê–¶–ò–Ø)
# @router.callback_query(F.data.regexp(r'[resachviton]{6,8}-subcategory_'))
# async def items(callback: CallbackQuery) -> None:
#     await callback.answer()
#     page = 1
#     indx = callback.data.find('-')
#     cat_name = callback.message.text[11:callback.message.text.find('\n')]
#     if callback.data[:indx]  ==  'research':
#         subcat_name, count, researches_dict = await kb.researches(callback.data.split('_')[1], callback.from_user.id)
#         pages_count = len(researches_dict)
#         some_text = f'–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –≤ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {count}\n\n–í—ã–±—Ä–∞–≤ –∏ –Ω–∞–∂–∞–≤ –Ω–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ, –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ–º.'
#         keyboards = await pagination(researches_dict, int(page), int(pages_count), callback.data[:indx])
#     elif callback.data[:indx]  ==  'service':
#         subcat_name, count, services_dict = await kb.services(callback.data.split('_')[1], callback.from_user.id)
#         pages_count = len(services_dict)
#         some_text = f'–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —É—Å–ª—É–≥ –≤ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {count}\n\n–í—ã–±—Ä–∞–≤ –∏ –Ω–∞–∂–∞–≤ –Ω–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é —É—Å–ª—É–≥—É, –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ–π.'
#         keyboards = await pagination(services_dict, int(page), int(pages_count), callback.data[:indx])
#     elif callback.data[:indx]  ==  'action':
#         subcat_name, count, actions_dict = await kb.actions(callback.data.split('_')[1])
#         pages_count = len(actions_dict)
#         some_text = f'–ê–∫—Ü–∏–π –≤ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {count}\n\n–í—ã–±—Ä–∞–≤ –∏ –Ω–∞–∂–∞–≤ –Ω–∞ –∞–∫—Ü–∏—é, –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ–π.'
#         keyboards = await pagination(actions_dict, int(page), int(pages_count), callback.data[:indx])
#     await callback.message.edit_text(f'''–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{cat_name}</b>\n–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{subcat_name}</b>\n{some_text}''',
# parse_mode = 'HTML')
#     await callback.message.edit_reply_markup(reply_markup = keyboards)


# # –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ 
# # –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
# @router.callback_query(F.data.startswith('research-'))
# async def get_research_data(callback: CallbackQuery) -> None:
#     await callback.answer()
#     research_get_id = callback.data.split('#')[0]
#     research_id = research_get_id.split('-')[1]
#     get_page = callback.data.split('#')[1]
#     page_count = get_page.split('_')[0]
#     page = get_page.split('_')[1]
#     tg_id = callback.from_user.id
#     name, description, price, keyboard = await kb.research_data(research_id, tg_id, page_count, page)
#     if '*' in name:
#         name = name.replace('*', '"')
#     res_cost = ''
#     if len(str(price).split('.')[0])  ==  4:
#         temp_cost = str(price).split('.')[0]
#         res_cost = temp_cost[:1]+' '+temp_cost[1:]
#     elif len(str(price).split('.')[0])  ==  5:
#         temp_cost = str(price).split('.')[0]
#         res_cost = temp_cost[:2]+' '+temp_cost[2:]
#     else: res_cost = str(price).split('.')[0]
#     await callback.message.edit_text(f'<b>{name}</b>\n\n<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n\n<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:</b> {res_cost} ‚ÇΩ',parse_mode = 'HTML')
#     await callback.message.edit_reply_markup(reply_markup = keyboard)

# # –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é 
# # –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é —É—Å–ª—É–≥—É
# @router.callback_query(F.data.startswith('service-'))
# async def get_service_data(callback: CallbackQuery) -> None:
#     await callback.answer()
#     service_get_id = callback.data.split('#')[0]
#     service_id = service_get_id.split('-')[1]
#     get_page = callback.data.split('#')[1]
#     page_count = get_page.split('_')[0]
#     page = get_page.split('_')[1]
#     tg_id = callback.from_user.id
#     name, price, keyboard = await service_data(service_id, tg_id, page_count, page)
#     if '*' in name:
#         name = name.replace('*', '"')
#     res_cost = ''
#     if len(str(price).split('.')[0])  ==  4:
#         temp_cost = str(price).split('.')[0]
#         res_cost = temp_cost[:1]+' '+temp_cost[1:]
#     elif len(str(price).split('.')[0])  ==  5:
#         temp_cost = str(price).split('.')[0]
#         res_cost = temp_cost[:2]+' '+temp_cost[2:]
#     else: res_cost = str(price).split('.')[0]
#     await callback.message.edit_text(f'<b>{name}</b>\n\n<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π —É—Å–ª—É–≥–∏:</b> {res_cost} ‚ÇΩ', parse_mode = 'HTML')
#     await callback.message.edit_reply_markup(reply_markup = keyboard)

# # –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é 
# # –∞–∫—Ü–∏—é
# @router.callback_query(F.data.startswith('action-'))
# async def get_service_data(callback: CallbackQuery) -> None:
#     await callback.answer()
#     action_get_id = callback.data.split('#')[0]
#     action_id = action_get_id.split('-')[1]
#     get_page = callback.data.split('#')[1]
#     page_count = get_page.split('_')[0]
#     page = get_page.split('_')[1]
#     name, description, price, keyboard = await kb.action_data(action_id, page_count, page)
#     if '*' in name:
#         name = name.replace('*', '"')
#     res_cost = ''
#     if len(str(price).split('.')[0])  ==  4:
#         temp_cost = str(price).split('.')[0]
#         res_cost = temp_cost[:1]+' '+temp_cost[1:]
#     elif len(str(price).split('.')[0])  ==  5:
#         temp_cost = str(price).split('.')[0]
#         res_cost = temp_cost[:2]+' '+temp_cost[2:]
#     else: res_cost = str(price).split('.')[0]
#     await callback.message.edit_text(f'<b>{name}</b>\n\n<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n\n<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ü–∏–∏:</b> {res_cost} ‚ÇΩ', parse_mode = 'HTML')
#     await callback.message.edit_reply_markup(reply_markup = keyboard)

# # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —Å—Ä–µ–¥–Ω—é—é –∫–Ω–æ–ø–∫—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
# # (–Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π/–Ω–æ–º–µ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–π) 
# # –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–ª–µ—Ä—Ç "–¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
# @router.callback_query(F.data.startswith('back_proxy_type'))
# async def edit_page(callback: CallbackQuery) -> None:
#     page = callback.data.split('#')[1]
#     await callback.answer(f'–¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚Ññ{page}')

# # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –±–æ–∫–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏    
# @router.callback_query(F.data.regexp(r'[rsa]page'))
# async def pages(callback: CallbackQuery) -> None:
#     data = callback.data.split('_')[0]
#     ppages = callback.data.split('_')[1]
#     pages_count = ppages.split('#')[0]
#     page = ppages.split('#')[1]
#     if callback.data[0]  ==  'r':
#         researches_dict = await kb.researches(data.split('&')[1], callback.from_user.id, True)
#         keyboards = await pagination(researches_dict, int(page), int(pages_count), 'research')
#     elif callback.data[0]  ==  's':
#         services_dict = await kb.services(data.split('&')[1], callback.from_user.id, True)
#         keyboards = await pagination(services_dict, int(page), int(pages_count), 'service')
#     elif callback.data[0]  ==  'a':
#         actions_dict = await kb.actions(data.split('&')[1], True)
#         keyboards = await pagination(actions_dict, int(page), int(pages_count), 'action')
#     await callback.message.edit_reply_markup(reply_markup = keyboards)

# # –ü–ê–ì–ò–ù–ê–¶–ò–Ø
# async def pagination(data, page, page_count, what_is):
#     if what_is  ==  'research':
#         buttons = []
#         cat_id = data[page][0][2]
#         subcat_id = data[page][0][3]
#         for data_page in data[page]:
#             if '*' in data_page[1]:
#                 data_page[1] = data_page[1].replace('*', '"')
#             name_button = [
#                 InlineKeyboardButton(text = f'{data_page[1]}', callback_data = f'research-{data_page[0]}#{page_count}_{page}') # #{item.ResearchCategoryID}#{item.ResearchSubcategoryID}
#             ]
#             buttons.append(name_button)
        
        
#         if page_count > 1:
#             bottom_buttons = []
#             if page !=  1:
#                 bottom_buttons.append(InlineKeyboardButton(text = f'‚¨ÖÔ∏è', callback_data = f'rpage&{cat_id}#{subcat_id}_{page_count}#{page-1}'))
#             else:
#                 bottom_buttons.append(InlineKeyboardButton(text = f'‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data = f'rstop_back#{cat_id}'))
                
#             bottom_buttons.append(InlineKeyboardButton(text = f'{page}/{page_count}', callback_data = f'back_proxy_type#{page}'))
            
#             if page  ==  page_count:
#                 bottom_buttons.append(InlineKeyboardButton(text = f'‚õîÔ∏è', callback_data = f'stop_stop'))
#             else:
#                 bottom_buttons.append(InlineKeyboardButton(text = f'‚û°Ô∏è', callback_data = f'rpage&{cat_id}#{subcat_id}_{page_count}#{page+1}'))
                
#             buttons.append(bottom_buttons)
#             if page > 1:
#                 buttons.append([
#                     InlineKeyboardButton(text = f'‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data = f'rstop_back#{cat_id}')
#                 ])
#         else:
#             buttons.append([
#                 InlineKeyboardButton(text = f'‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data = f'rstop_back#{cat_id}')
#             ])
#         buttons.append([
#             InlineKeyboardButton(text = f'‚è™–í—ã–π—Ç–∏', callback_data = f'exit_to_research_or_service')
#         ])
        
#         keyboard = InlineKeyboardMarkup(row_width = 1, inline_keyboard = buttons)
#         return keyboard
    
#     elif what_is  ==  'service':
#         buttons = []
#         cat_id = data[page][0][2]
#         subcat_id = data[page][0][3]
#         for data_page in data[page]:
#             if '*' in data_page[1]:
#                 data_page[1] = data_page[1].replace('*', '"')
#             name_button = [
#                 InlineKeyboardButton(text = f'{data_page[1]}', callback_data = f'service-{data_page[0]}#{page_count}_{page}') # #{item.ResearchCategoryID}#{item.ResearchSubcategoryID}
#             ]
#             buttons.append(name_button)
        
#         if page_count > 1:
#             bottom_buttons = []
#             if page !=  1:
#                 bottom_buttons.append(InlineKeyboardButton(text = f'‚¨ÖÔ∏è', callback_data = f'spage&{cat_id}#{subcat_id}_{page_count}#{page-1}'))
#             else:
#                 bottom_buttons.append(InlineKeyboardButton(text = f'‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data = f'sstop_back#{cat_id}'))
                
#             bottom_buttons.append(InlineKeyboardButton(text = f'{page}/{page_count}', callback_data = f'back_proxy_type#{page}'))
            
#             if page  ==  page_count:
#                 bottom_buttons.append(InlineKeyboardButton(text = f'‚õîÔ∏è', callback_data = f'stop_stop'))
#             else:
#                 bottom_buttons.append(InlineKeyboardButton(text = f'‚û°Ô∏è', callback_data = f'spage&{cat_id}#{subcat_id}_{page_count}#{page+1}'))
                
#             buttons.append(bottom_buttons)
#             if page > 1:
#                 buttons.append([
#                     InlineKeyboardButton(text = f'‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data = f'sstop_back#{cat_id}')
#                 ])
        
#         else:
#             buttons.append([
#                 InlineKeyboardButton(text = f'‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data = f'sstop_back#{cat_id}')
#             ])
#         buttons.append([
#             InlineKeyboardButton(text = f'‚è™–í—ã–π—Ç–∏', callback_data = f'exit_to_research_or_service')
#         ])
        
#         keyboard = InlineKeyboardMarkup(row_width = 1, inline_keyboard = buttons)
#         return keyboard
    
#     elif what_is  ==  'action':
#         buttons = []
#         cat_id = data[page][0][3]
#         subcat_id = data[page][0][4]
#         for data_page in data[page]:
#             if '*' in data_page[1]:
#                 data_page[1] = data_page[1].replace('*', '"')
#             name_button = [
#                 InlineKeyboardButton(text = f'{data_page[1]}', callback_data = f'action-{data_page[0]}#{page_count}_{page}') # #{item.ResearchCategoryID}#{item.ResearchSubcategoryID}
#             ]
#             buttons.append(name_button)
        
#         if page_count > 1:
#             bottom_buttons = []
#             if page !=  1:
#                 bottom_buttons.append(InlineKeyboardButton(text = f'‚¨ÖÔ∏è', callback_data = f'apage&{cat_id}#{subcat_id}_{page_count}#{page-1}'))
#             else:
#                 bottom_buttons.append(InlineKeyboardButton(text = f'‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data = f'astop_back#{cat_id}'))
                
#             bottom_buttons.append(InlineKeyboardButton(text = f'{page}/{page_count}', callback_data = f'back_proxy_type#{page}'))
            
#             if page  ==  page_count:
#                 bottom_buttons.append(InlineKeyboardButton(text = f'‚õîÔ∏è', callback_data = f'stop_stop'))
#             else:
#                 bottom_buttons.append(InlineKeyboardButton(text = f'‚û°Ô∏è', callback_data = f'apage&{cat_id}#{subcat_id}_{page_count}#{page+1}'))
                
#             buttons.append(bottom_buttons)
#             if page > 1:
#                     buttons.append([
#                         InlineKeyboardButton(text = f'‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data = f'astop_back#{cat_id}')
#                     ])
        
#         else:
#             buttons.append([
#                 InlineKeyboardButton(text = f'‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data = f'astop_back#{cat_id}')
#             ])
#         buttons.append([
#             InlineKeyboardButton(text = f'‚è™–í—ã–π—Ç–∏', callback_data = f'exit_to_research_or_service')
#         ])
        
#         keyboard = InlineKeyboardMarkup(row_width = 1, inline_keyboard = buttons)
#         return keyboard

# # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Å—Ç–æ–ø –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
# @router.callback_query(F.data  ==  'stop_stop')
# async def stop_pagination(callback: CallbackQuery):
#     await callback.answer('–°–ø–∏—Å–æ–∫ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è')
    
# # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –±–æ–∫–æ–≤—É—é –∫–Ω–æ–ø–∫—É –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —Å–ø–∏—Å–∫—É –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π) 
# @router.callback_query(F.data.regexp(r'[rsa]stop_back'))
# async def back_stop_pagination(callback: CallbackQuery):
#     await callback.answer()
#     cat_id = int(callback.data.split('#')[1])
#     if callback.data[0]  ==  'r':
#         cat_name, keyboard = await kb.research_subcategories(cat_id, False, callback.from_user.id)
#     elif callback.data[0]  ==  's':
#         cat_name, keyboard = await kb.service_subcategories(cat_id, False, callback.from_user.id)
#     elif callback.data[0]  ==  'a':
#         cat_name, keyboard = await kb.actions_subcategories(cat_id, False)
#     await callback.message.edit_text(f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{cat_name}</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:', parse_mode = 'HTML')
#     await callback.message.edit_reply_markup(reply_markup = keyboard)

# # –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ 
# @router.callback_query(F.data.regexp(r'[rsa]back-to-pagination'))
# async def back_to_pagination(callback: CallbackQuery):
#     # rback-to-pagination&{cat.Name}#{subcat_name}/{researches_count}_{page_count}#{page}
#     count = callback.data.split('_')[0].split('/')[1]
#     ids = callback.data.split('_')[0].split('/')[0].split('&')[1].split('#')
#     cat_id = ids[0]
#     subcat_id = ids[1]
#     ppages = callback.data.split('_')[1]
#     pages_count = ppages.split('#')[0]
#     page = ppages.split('#')[1]
#     if callback.data[0]  ==  'r':
#         await callback.answer()
#         researches_dict = await kb.researches(callback.data.split('_')[0].split('/')[0].split('&')[1], callback.from_user.id, True)
#         cat_name, subcat_name = await kb.get_cat_subcat_names(cat_id, subcat_id, 'research')
#         keyboards = await pagination(researches_dict, int(page), int(pages_count), 'research')
#         some_text = f'–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –≤ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {count}\n\n–í—ã–±—Ä–∞–≤ –∏ –Ω–∞–∂–∞–≤ –Ω–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ, –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ–º.'
#     elif callback.data[0]  ==  's':
#         await callback.answer()
#         services_dict = await kb.services(callback.data.split('_')[0].split('/')[0].split('&')[1], callback.from_user.id, True)
#         cat_name, subcat_name = await kb.get_cat_subcat_names(cat_id, subcat_id, 'service')
#         keyboards = await pagination(services_dict, int(page), int(pages_count), 'service')
#         some_text = f'–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —É—Å–ª—É–≥ –≤ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {count}\n\n–í—ã–±—Ä–∞–≤ –∏ –Ω–∞–∂–∞–≤ –Ω–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é —É—Å–ª—É–≥—É, –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ–π.'
#     elif callback.data[0]  ==  'a':
#         await callback.answer()
#         actions_dict = await kb.actions(callback.data.split('_')[0].split('/')[0].split('&')[1], True)
#         cat_name, subcat_name = await kb.get_cat_subcat_names(cat_id, subcat_id, 'action')
#         keyboards = await pagination(actions_dict, int(page), int(pages_count), 'action')
#         some_text = f'–ê–∫—Ü–∏–π –≤ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {count}\n\n–í—ã–±—Ä–∞–≤ –∏ –Ω–∞–∂–∞–≤ –Ω–∞ –∞–∫—Ü–∏—é, –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ–π.'
#     await callback.message.edit_text(f'''–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{cat_name}</b>\n–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{subcat_name}</b>\n{some_text}''', parse_mode = 'HTML')
#     await callback.message.edit_reply_markup(reply_markup = keyboards)

# # –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ (–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏–ª–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —É—Å–ª—É–≥–∏)
# @router.callback_query(F.data  ==  'exit_to_research_or_service')
# async def exit_to_research_or_service(callback: CallbackQuery):
#     await callback.answer()
#     await callback.message.edit_text('–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏–ª–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —É—Å–ª—É–≥–∏?\n–î–ª—è –ø–æ–∏—Å–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è/—É—Å–ª—É–≥–∏.')
#     await callback.message.edit_reply_markup(reply_markup = await kb.default_keyboard_builder(
#                                                     text = ['üíâ–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è', 'üßë‚Äç‚öïÔ∏è–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —É—Å–ª—É–≥–∏', 'üõçÔ∏è–ê–∫—Ü–∏–∏', '‚è™–ü–æ–∫–∏–Ω—É—Ç—å –º–µ–Ω—é'], 
#                                                     callback_data = ['researches', 'services', 'actions', 'exit_or_exit'], 
#                                                     sizes = 1
#                                                 )
#                                             )

# # –≤—ã—Ö–æ–¥ –∏–∑ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ (–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏–ª–º –∏–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —É—Å–ª—É–≥–∏)
# @router.callback_query(F.data.in_(['exit_or_exit', 'cart_exit', 'pag_exit', 'orders_stop_back']))
# async def exit_or_exit(callback: CallbackQuery) -> None:
#     await callback.answer()
#     await callback.message.edit_reply_markup(reply_markup = None)
#     await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –Ω–∏–∂–Ω–µ–≥–æ –º–µ–Ω—é.')
    # await callback.message.edit_reply_markup(reply_markup = None)

# # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É 
# @router.callback_query(F.data.startswith('to_cart'))
# async def to_cart(callback: CallbackQuery):
#     data = callback.data.split('/')
#     all_page_data = data[1].split('_')
#     count = all_page_data[0]
#     page_data = all_page_data[1].split('#')
#     pages_count = page_data[0]
#     page = page_data[1]
#     ids = data[0].split('&')
#     ide = ids[0].split('#')[1]
#     what_is = ids[0].split('#')[0][8:]
#     print(f'\n–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É {what_is}')
#     cat_id = ids[1].split('#')[0]
#     subcat_id = ids[1].split('#')[1]
#     cat_name, subcat_name = await kb.get_cat_subcat_names(cat_id, subcat_id, what_is)
#     if what_is  ==  'research':
#         researches_dict = await kb.researches(ids[1], callback.from_user.id, True)
#         added = await request.add_to_cart(callback.from_user.id, Rid = int(ide))
#         keyboards = await pagination(researches_dict, int(page), int(pages_count), what_is)
#         some_text = f'–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –≤ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {count}\n\n–í—ã–±—Ä–∞–≤ –∏ –Ω–∞–∂–∞–≤ –Ω–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ, –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ–º.'
#     elif what_is  ==  'service':
#         services_dict = await kb.services(ids[1], callback.from_user.id, True)
#         added = await request.add_to_cart(callback.from_user.id, Sid = int(ide))
#         keyboards = await pagination(services_dict, int(page), int(pages_count), what_is)
#         some_text = f'–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —É—Å–ª—É–≥ –≤ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {count}\n\n–í—ã–±—Ä–∞–≤ –∏ –Ω–∞–∂–∞–≤ –Ω–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é —É—Å–ª—É–≥—É, –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ–π.'
#     elif what_is  ==  'action':
#         actions_dict = await kb.actions(ids[1], True)
#         added = await request.add_to_cart(callback.from_user.id, Aid = int(ide))
#         keyboards = await pagination(actions_dict, int(page), int(pages_count), what_is)
#         some_text = f'–ê–∫—Ü–∏–π –≤ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {count}\n\n–í—ã–±—Ä–∞–≤ –∏ –Ω–∞–∂–∞–≤ –Ω–∞ –∞–∫—Ü–∏—é, –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ–π.'
#     # print(added)
#     if added:
#         await callback.answer('–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É')
#     else: await callback.answer('–£–∂–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ')
#     await callback.message.edit_text(f'''–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{cat_name}</b>\n–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{subcat_name}</b>\n{some_text}''', parse_mode = 'HTML')
#     await callback.message.edit_reply_markup(reply_markup = keyboards)

# @router.callback_query(F.data.startswith('search-item_id'))
# async def from_search_to_cart(callback: CallbackQuery):
#     data = callback.data.split('#')
#     item_id = int(data[1])
#     what_is = data[0].split('/')[1]
#     if what_is  ==  'research':
#         added = await request.add_to_cart(callback.from_user.id, Rid = item_id)
#     elif what_is  ==  'service':
#         added = await request.add_to_cart(callback.from_user.id, Sid = item_id)
#     if added:
#         await callback.answer('–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É')
#     else: await callback.answer('–£–∂–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ')
    # await callback.message.edit_reply_markup(reply_markup = None)
    # await callback.message.edit_text(f'–ß—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–æ—Ä–∑–∏–Ω—É, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>"–ö–æ—Ä–∑–∏–Ω–∞"</b>.', parse_mode = 'HTML')
    
# —Ç–µ–ª–µ–º–µ–¥–∏—Ü–∏–Ω–∞        
# @router.callback_query(F.data.startswith('telemed-category'))
# async def get_telemed(callback: CallbackQuery):
#     await callback.answer()
#     cat_name = '–¢–µ–ª–µ–º–µ–¥–∏—Ü–∏–Ω–∞'
#     await callback.message.answer(f'''–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{cat_name}</b>
# –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã (—á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –≤—Ä–∞—á–∞, –≤–∞—Å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç –Ω–∞ —Å–∞–π—Ç):''',
# reply_markup = await kb.get_telemed_buttons(),
# parse_mode = 'HTML')

# # —É–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç
# @router.callback_query(F.data.startswith('delete-'))
# async def delete_item(callback: CallbackQuery):
#     await callback.answer('–£–¥–∞–ª–µ–Ω–æ')
#     if 'research' in callback.data:
#         research_id = callback.data.split('&')[1]
#         await request.edit_cart(callback.from_user.id, research_id, 'research')
#         # out_text, keyboard = await kb.get_cart_buttons(callback.from_user.id)
#     elif 'service' in callback.data:
#         service_id = callback.data.split('&')[1]
#         await request.edit_cart(callback.from_user.id, service_id, 'service')
#         # out_text, keyboard = await kb.get_cart_buttons(callback.from_user.id)
#     elif 'action' in callback.data:
#         action_id = callback.data.split('&')[1]
#         await request.edit_cart(callback.from_user.id, action_id, 'action')
#     out_text, keyboard = await kb.get_cart_buttons(callback.from_user.id)
#     if keyboard:
#         await callback.message.edit_text(f'<b>–í–∞—à –∑–∞–∫–∞–∑:</b>\n{out_text}', parse_mode = 'HTML')
#         await callback.message.edit_reply_markup(reply_markup = keyboard)
#     else:
#         await callback.message.edit_reply_markup(reply_markup = None)
#         await callback.message.edit_text('<i><b>–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.</b></i>\n\n–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é —É—Å–ª—É–≥—É –≤ –∫–æ—Ä–∑–∏–Ω—É, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é <b>"–û—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–∫–∞–∑"</b>.',
#                                             parse_mode = 'HTML'
#                                         )

# # —É–¥–∞–ª–∏—Ç—å –≤–µ—Å—å –∑–∞–∫–∞–∑ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
# @router.callback_query(F.data  ==  'delete_all')
# async def delete_all(callback: CallbackQuery):
#     await callback.answer()
#     await request.del_cart(callback.from_user.id)
#     await callback.message.edit_reply_markup(reply_markup = None)
#     await callback.message.edit_text('<i><b>–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.</b></i>\n\n–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é —É—Å–ª—É–≥—É –≤ –∫–æ—Ä–∑–∏–Ω—É, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é <b>"–û—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–∫–∞–∑"</b>.',
#                                         parse_mode = 'HTML'
#                                     )

# # –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (–∏–∑ –∫–æ—Ä–∑–∏–Ω—ã)        
# @router.callback_query(F.data  ==  'place_an_order')
# async def place_an_order_qconfirm(callback: CallbackQuery):
#     await callback.answer()
#     await callback.message.delete()
#     # await callback.message.edit_text()
#     await callback.message.answer_document(send_file('files\\personal_data_agreement.pdf'), 
#                                             reply_markup = await kb.default_keyboard_builder(
#                                                 text = ['‚úÖ–°–æ–≥–ª–∞—à–∞—é—Å—å','‚ùå–ù–µ —Å–æ–≥–ª–∞—à–∞—é—Å—å'], 
#                                                 callback_data = ['agree_place_an_order', 'disagree_place_an_order']), 
#                                             caption = '–í—ã —Å–æ–≥–ª–∞—Å–Ω—ã –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö?', protect_content = True
#                                         )
    
    
# @router.callback_query(F.data.regexp(r'\b[sid]{,3}agree_\w{14}'))
# async def place_an_order_confirm(callback: CallbackQuery):
#     await callback.answer()
#     if 'dis' in callback.data:
#         await callback.message.edit_caption(inline_message_id = callback.inline_message_id, 
#                                                 caption = '–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.\n–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–æ –æ–Ω –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –∞–Ω–æ–Ω–∏–º–Ω–æ, —Ç–∞–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –≤—Ä–∞—á–∏ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç.', 
#                                                 reply_markup = await kb.default_keyboard_builder(
#                                                     text = ['–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å','–û—Ç–º–µ–Ω–∞'], 
#                                                     callback_data = ['continue_place_an_order','cancle_place_an_order_comfirm']
#                                                 )   
#                                             )        
#     else:
#         while True:
#             digits = random.sample('1234567890', 9)
#             order_num = await request.get_order_number(''.join(digits))
#             if order_num: break
#         text = await kb.get_cart_buttons(callback.from_user.id, get_text = True)
#         # await callback.message.edit_reply_markup(reply_markup = None)
#         await callback.message.edit_caption(inline_message_id = callback.inline_message_id, caption = '–í—ã –¥–∞–ª–∏ —Å–≤–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.',
#                                             reply_markup = None)
#         await callback.message.answer(f'–í–∞—à –∑–∞–∫–∞–∑ <b>‚Ññ{"".join(digits)}</b>:\n{text}', parse_mode = 'HTML')
#         await callback.message.answer('–ö–∞–∫–∏–º —Å–ø–æ—Å–æ–±–æ–º —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É?', reply_markup = await kb.get_payment_buttons(''.join(digits), 0))
    
# @router.callback_query(F.data.startswith(('continue_place','cancle_place')))   
# async def place_an_order_continue(callback: CallbackQuery):
#     await callback.answer()
#     if 'continue' in callback.data:
#         while True:
#             digits = random.sample('1234567890', 9)
#             order_num = await request.get_order_number(''.join(digits))
#             if order_num: break
#         await callback.message.edit_reply_markup(reply_markup = None)
#         await callback.message.answer('–ö–∞–∫–∏–º —Å–ø–æ—Å–æ–±–æ–º —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É?', reply_markup = await kb.get_payment_buttons(''.join(digits), 1))
#     else:
#         await callback.message.edit_reply_markup(reply_markup = None)
#         await callback.message.answer(f'–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ (–∑–∞–∫–∞–∑ <b>–Ω–µ —É–¥–∞–ª–µ–Ω</b>), —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ <i>–ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É</i>.', parse_mode = 'HTML')

# # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –æ–ø–ª–∞—Ç—É –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–º –æ—Ç–¥–µ–ª–µ–Ω–∏–∏
# @router.callback_query(F.data.startswith('offline_payment'))
# async def offline_payment(callback: CallbackQuery):
#     await callback.answer()
#     await callback.message.edit_text('–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø–ª–∞—Ç—É –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–º –æ—Ç–¥–µ–ª–µ–Ω–∏–∏.', reply_markup = None)
#     data = callback.data.split('#')[1]
#     order_num = data.split('/')[0]
#     anon = data.split('/')[1]
#     # print('>>> ANON? -> ', anon)
#     qr_buffer = await request.place_order(callback.from_user.id, order_num, False, anon)
#     if qr_buffer:
#         await callback.message.answer_photo(photo = send_buffer(qr_buffer.getvalue(), f'qrcode_{callback.from_user.id}.png'), 
#                                                 caption = GET_QR_TEXT, 
#                                                 protect_content = True, parse_mode = 'HTML'
#                                             )
#     else:
#         # —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–µ–¥. –∫–∞—Ä—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞, –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π QR
#         await callback.message.edit_text('–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–≤–æ–∏–º QR-–∫–æ–¥–æ–º, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —ç—Ç–æ—Ç —á–∞—Ç, —á—Ç–æ–±—ã –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ —Å–∞–º–æ–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∏–ª–∏ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.', 
#                                             reply_markup = await kb.default_keyboard_builder(
#                                             text = '–ó–∞–ø—Ä–æ—Å–∏—Ç—å QR-–∫–æ–¥',
#                                             callback_data = f'resend_qrcode',
#                                             sizes = 1
#                                         ))

# @router.callback_query(F.data.startswith('resend_qrcode'))
# async def resend_qrcode(callback: CallbackQuery):
#     await callback.answer()
#     qr_buffer = await request.place_order(callback.from_user.id)
#     await callback.message.edit_text('–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É QR-–∫–æ–¥–∞.', reply_markup = None)
#     await callback.message.answer_photo(photo = send_buffer(qr_buffer.getvalue(), f'qrcode_{callback.from_user.id}.png'), 
#                                             caption = GET_QR_TEXT_CONNECT, 
#                                             protect_content = True, parse_mode = 'HTML'
#                                         )

# # –≤—ã–±—Ä–∞–Ω–∞ –æ–Ω–ª–∞–π–Ω –æ–ø–ª–∞—Ç–∞
# @router.callback_query(F.data.startswith('online_payment'))
# async def online_payment(callback: CallbackQuery):
#     await callback.answer()
#     await callback.message.edit_text('–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–Ω–ª–∞–π–Ω –æ–ø–ª–∞—Ç—É.', reply_markup = None)
#     # –¥–æ–±–∞–≤–∏—Ç—å –≤ –±–¥ –∑–∞–∫–∞–∑ (–ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –≤ –∑–∞–∫–∞–∑—ã)
#     data = callback.data.split('#')[1]
#     order_num = data.split('/')[0]
#     anon = data.split('/')[1]
#     cost = await kb.get_cart_buttons(callback.from_user.id, True)
#     price = LabeledPrice(label = f'–ó–∞–∫–∞–∑ ‚Ññ{order_num}', amount = cost*100)
#     await callback.message.answer_invoice(
#         title = f'–ó–∞–∫–∞–∑ ‚Ññ{order_num}',
#         description = f'–û–ø–ª–∞—Ç–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ ‚Ññ{order_num}. –í —Ç–µ—á–µ–Ω–∏–µ 30 –¥–Ω–µ–π, —Å –º–æ–º–µ–Ω—Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ—Å–µ—Ç–∏—Ç—å –ª—é–±–æ–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ.',
#         provider_token = os.getenv('PAYMENTS_TOKEN'),
#         payload = f'place_an_order#{order_num}/{anon}',
#         currency = 'rub',
#         prices = [price],
#         start_parameter = 'GemotestBot',
#         provider_data = None,
#         need_name = False,
#         need_phone_number = False,
#         need_email = False, # —Ç–æ—á–Ω–æ –Ω—É–∂–Ω–∞ –ø–æ—á—Ç–∞?
#         need_shipping_address = False,
#         is_flexible = False,
#         disable_notification = False,
#         protect_content = True,
#         reply_to_message_id = None,
#         reply_markup = None
#     )
    # await callback.message.edit_reply_markup(reply_markup = None)

# @router.pre_checkout_query(lambda query: True)
# async def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery):
#     await pre_checkout_query.answer(ok = True)
#     print(pre_checkout_query)

# @router.message(F.successful_payment)
# async def success_payment(message: Message):
#     print('GET ADD ORDER AND DEL CART')
#     data = message.successful_payment.invoice_payload.split('#')[1]
#     order_num = data.split('/')[0]
#     anon = data.split('/')[1]
#     print(f'\nORDER ID - {order_num}')
#     qr_buffer = await request.place_order(message.from_user.id, order_num, True, anon)
#     if qr_buffer:
#         await message.answer_photo(photo = send_buffer(qr_buffer.getvalue(), f'qrcode_{message.from_user.id}.png'), 
#                                         caption = '–≠—Ç–æ –≤–∞—à QR-–∫–æ–¥ (–∫–∞—Ä—Ç–æ—á–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞).\n–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ –µ–≥–æ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ —Å–∞–º–æ–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∏–ª–∏ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.', 
#                                         protect_content = True
#                                     )
#     else:
#         await message.answer('–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–≤–æ–∏–º QR-–∫–æ–¥–æ–º, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —ç—Ç–æ—Ç —á–∞—Ç, —á—Ç–æ–±—ã –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ —Å–∞–º–æ–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∏–ª–∏ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.',
#                                 reply_markup = await kb.default_keyboard_builder(
#                                     text = '–ó–∞–ø—Ä–æ—Å–∏—Ç—å QR-–∫–æ–¥',
#                                     callback_data = f'resend_qrcode#{order_num}',
#                                     sizes = 1
#                                 )
#                             )

# @router.callback_query(F.data  ==  'cart_del_instruction')
# async def cart_del_item(callback: CallbackQuery):
#     await callback.answer('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã')
    
    

# # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫
# @router.message(MessageMatch(['–ø–æ–¥–∫–ª—é—á–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤', '–ø–æ–¥–∫–ª—é—á–∏—Ç—å —É—Å–ª—É–≥—É', '–ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤']))
# async def activate_the_service(message: Message) -> None:
#     user, phone = await request.set_user(message.from_user.id)
#     if not phone:
#         await message.answer_document(send_file('files\\personal_data_agreement.pdf'), 
#                                         reply_markup = await kb.default_keyboard_builder(
#                                             text = ['‚úÖ–°–æ–≥–ª–∞—à–∞—é—Å—å','‚ùå–ù–µ —Å–æ–≥–ª–∞—à–∞—é—Å—å'], 
#                                             callback_data = ['agree', 'disagree']
#                                         ), 
#                                         caption = '–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–≤—É—Ö—ç—Ç–∞–ø–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é (<b>–æ–±–ª–∞—á–Ω—ã–π –ø–∞—Ä–æ–ª—å</b>) –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.\n\n–í—ã —Å–æ–≥–ª–∞—Å–Ω—ã –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö?', 
#                                         protect_content = True, parse_mode = 'HTML'
#                                     )
#     else: await message.answer('–í—ã —É–∂–µ –ø–æ–¥–∫–ª—é—á–∏–ª–∏ —É—Å–ª—É–≥—É.')
# # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫
# @router.message(MessageMatch(['–æ—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–∫–∞–∑', '–æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', '–æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É', '–æ—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –∑–∞—è–≤–∫—É']))
# async def researches_or_services(message: Message) -> None:
#     await message.answer('–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏–ª–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —É—Å–ª—É–≥–∏?\n–î–ª—è –ø–æ–∏—Å–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è/—É—Å–ª—É–≥–∏.', 
#                             reply_markup = await kb.default_keyboard_builder(
#                                     text = ['üíâ–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è', 'üßë‚Äç‚öïÔ∏è–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —É—Å–ª—É–≥–∏', 'üõçÔ∏è–ê–∫—Ü–∏–∏', '‚è™–ü–æ–∫–∏–Ω—É—Ç—å –º–µ–Ω—é'], 
#                                     callback_data = ['researches', 'services', 'actions', 'exit_or_exit'], sizes = 1
#                             )
#                         )
# # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# @router.message(MessageMatch(['–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è', '—Å–¥–∞—Ç—å –∞–Ω–∞–ª–∏–∑—ã', '–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ', '—Å–¥–∞—Ç—å –∞–Ω–∞–ª–∏–∑', '–ø—Ä–æ–π—Ç–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ']))
# async def researches_categories(message: Message) -> None:
#     await message.answer('üíâ–òc—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', 
#                             reply_markup = await kb.research_categories(message.from_user.id)
#                         )
# # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# @router.message(MessageMatch(['–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —É—Å–ª—É–≥–∏', '—É—Å–ª—É–≥–∏', '–º–µ–¥—É—Å–ª—É–≥–∏', '–º–µ–¥ —É—Å–ª—É–≥–∏', '–º–µ–¥. —É—Å–ª—É–≥–∏', '–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —É—Å–ª—É–≥–∞', '—É—Å–ª—É–≥–∞', '–º–µ–¥—É—Å–ª—É–≥–∞', '–º–µ–¥. —É—Å–ª—É–≥–∞', '–º–µ–¥ —É—Å–ª—É–≥–∞']))
# async def services_categories(message: Message) -> None:
#     await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', 
#                             reply_markup = await kb.service_categories(message.from_user.id)
#                         )
# # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫
# @router.message(MessageMatch(['–ø–æ–º–æ—â—å', 'help', '–ø–æ–º–æ–≥–∏', '–ø–æ–º–æ–≥–∏—Ç–µ']))
# async def cmd_help(message: Message) -> None:
#     user, phone = await request.set_user(message.from_user.id)
#     if phone  ==  True:
#     # –¥–æ—Å—Ç–∞–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –ø–∞—Ü–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω, —Ç.–µ. –µ–º—É –ø—Ä–∏—Ö–æ–¥—è—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–æ–≤ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–∞–∫–æ–µ –∫–∞–∫ —Å–µ–π—á–∞—Å
#         await message.answer('''*_–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –±–æ—Ç—É\._*\n–ö–æ–≥–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–æ–≤ –±—É–¥—É—Ç –≥–æ—Ç–æ–≤—ã, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∏—Ö –≤ —ç—Ç–æ–º —á–∞—Ç–µ\.
# –ï—Å–ª–∏ –∞–Ω–∞–ª–∏–∑–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –ø–æ –º–µ—Ä–µ –∏—Ö –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏\.\n
# –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –Ω–∞–∂–º–∏—Ç–µ *"–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤"*\.\n
# –ï—Å–ª–∏ –≤—ã –±–æ–ª—å—à–µ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –≤ Telegram, –Ω–∞–∂–º–∏—Ç–µ *"–û—Ç–∫–ª—é—á–∏—Ç—å—Å—è –æ—Ç —É—Å–ª—É–≥–∏"*\.''', 
# parse_mode = 'MarkdownV2', reply_markup = help_button)
#     else:
#         await message.answer('''*_–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã\._*\n
# –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –≤ Telegram, –Ω–∞–∂–º–∏—Ç–µ *"–ü–æ–¥–∫–ª—é—á–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"*\.''', 
# parse_mode = 'MarkdownV2', reply_markup = help_button)
# # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫
# @router.message(MessageMatch(['–æ—Ç–∫–ª—é—á–∏—Ç—å—Å—è –æ—Ç —É—Å–ª—É–≥–∏', '–æ—Ç–∫–ª—é—á–∏—Ç—å —É—Å–ª—É–≥—É', '–æ—Ç–∫–ª—é—á–∏—Ç—å—Å—è', '–æ—Ç–∫–ª—é—á–∏—Ç—å']))
# async def exit_button(message: Message) -> None:
#     disconnect = await request.disconnect_user(message.from_user.id)
#     if disconnect:
#         await message.answer('–í—ã –æ—Ç–∫–ª—é—á–∏–ª–∏—Å—å –æ—Ç —É—Å–ª—É–≥–∏.', 
#                                 reply_markup = await kb.default_keyboard_builder(
#                                     text = ['üìù–û—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–∫–∞–∑','üõí–ö–æ—Ä–∑–∏–Ω–∞','üßæ–ó–∞–∫–∞–∑—ã','‚öôÔ∏è–ü–æ–º–æ—â—å','üÜï–ü–æ–¥–∫–ª—é—á–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤'],
#                                     sizes = [1,2,1,1],
#                                     input_field_placeholder = '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é...',
#                                     resize_keyboard = True
#                                 )
#                             )
#     else: await message.answer('–û—à–∏–±–∫–∞! –í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —É—Å–ª—É–≥–µ.', 
#                                 reply_markup = await kb.default_keyboard_builder(
#                                     text = ['üìù–û—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–∫–∞–∑','üõí–ö–æ—Ä–∑–∏–Ω–∞','üßæ–ó–∞–∫–∞–∑—ã','‚öôÔ∏è–ü–æ–º–æ—â—å','üÜï–ü–æ–¥–∫–ª—é—á–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤'],
#                                     sizes = [1,2,1,1],
#                                     input_field_placeholder = '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é...',
#                                     resize_keyboard = True
#                                 )
#                             )
# # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫
# @router.message(MessageMatch(['–∫–æ—Ä–∑–∏–Ω–∞', '–∫–æ—Ä–∑–∏–Ω–∫–∞', 'cart']))
# async def cart(message: Message) -> None:
#     # cart = await request.get_cart(message.from_user.id)
#     out_text, keyboard = await kb.get_cart_buttons(message.from_user.id, message_cart = True)
#     if keyboard:
#         await message.answer(f'<b>–í–∞—à –∑–∞–∫–∞–∑:</b>\n{out_text}', parse_mode = 'HTML', reply_markup = keyboard)
#     else:
#         await message.answer('<i><b>–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.</b></i>\n\n–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é —É—Å–ª—É–≥—É –≤ –∫–æ—Ä–∑–∏–Ω—É, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é <b>"–û—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–∫–∞–∑"</b>.',
#                                 parse_mode = 'HTML'
#                             )

# # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ (–≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤)
# @router.message(MessageMatch(['–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑','–º–æ–π –∑–∞–∫–∞–∑','–∑–∞–∫–∞–∑—ã','–º–æ–∏ –∑–∞–∫–∞–∑—ã', '–∏—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤']))
# async def orders(message: MessageMatch) -> None:
#     page = 1
#     count, orders_dict = await kb.orders(message.from_user.id)
#     if orders_dict:
#         pages_count = len(orders_dict)
#         keyboards = await orders_pagination(orders_dict, int(page), int(pages_count))
#         if count  ==  1: t = '–í–∞—à –∑–∞–∫–∞–∑'
#         else: t = '–í–∞—à–∏ –∑–∞–∫–∞–∑—ã'
#         await message.answer(f'{t} ({count}):', reply_markup = keyboards)
#     else: await message.answer(f'''–í—ã –ø–æ–∫–∞ –Ω–µ –æ—Ñ–æ—Ä–º–ª—è–ª–∏ –∑–∞–∫–∞–∑—ã.\n
# –ß—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É <b>"–û—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–∫–∞–∑"</b>, –ª–∏–±–æ <b>"–ö–æ—Ä–∑–∏–Ω–∞"</b>.''', 
# parse_mode = 'HTML')

# @router.callback_query(F.data.startswith('orders_page'))
# async def orders_pages(callback: CallbackQuery) -> None:
#     ppages = callback.data.split('&')[1]
#     pages_count = ppages.split('#')[0]
#     page = ppages.split('#')[1]
#     orders_dict = await kb.orders(callback.from_user.id, True)
#     keyboards = await orders_pagination(orders_dict, int(page), int(pages_count))
#     await callback.message.edit_reply_markup(reply_markup = keyboards)
    
# async def orders_pagination(data, page, page_count):
#     buttons = []
#     # cat_id = data[page][1][2]
#     # subcat_id = data[page][1][3]
#     for data_page in data[page]:
#         name_button = [
#             InlineKeyboardButton(text = f'‚Ññ{data_page[1]} ({data_page[2].date().strftime("%d.%m.%Y")})', callback_data = f'order-{data_page[0]}#{page_count}_{page}') # #{item.ResearchCategoryID}#{item.ResearchSubcategoryID}
#         ]
#         buttons.append(name_button)
    
#     bottom_buttons = []
#     if page !=  1:
#         bottom_buttons.append(InlineKeyboardButton(text = f'‚¨ÖÔ∏è', callback_data = f'orders_page&{page_count}#{page-1}'))
#     else:
#         bottom_buttons.append(InlineKeyboardButton(text = f'‚è™–í—ã–π—Ç–∏', callback_data = f'orders_stop_back'))
        
#     bottom_buttons.append(InlineKeyboardButton(text = f'{page}/{page_count}', callback_data = f'back_proxy_type#{page}'))
    
#     if page  ==  page_count:
#         bottom_buttons.append(InlineKeyboardButton(text = f'‚õîÔ∏è', callback_data = f'stop_stop'))
#     else:
#         bottom_buttons.append(InlineKeyboardButton(text = f'‚û°Ô∏è', callback_data = f'orders_page&{page_count}#{page+1}'))
        
#     buttons.append(bottom_buttons)
#     if page > 1:
#         buttons.append([
#             InlineKeyboardButton(text = f'‚è™–í—ã–π—Ç–∏', callback_data = f'orders_stop_back')
#         ])
    
#     keyboard = InlineKeyboardMarkup(row_width = 1, inline_keyboard = buttons)
#     return keyboard

# @router.callback_query(F.data.startswith('order-'))
# async def order(callback: CallbackQuery):
#     await callback.answer()
#     data = callback.data.split('#')
#     order_id = data[0].split('-')[1]
#     ppages = data[1].split('_')
#     pages_count = ppages[0]
#     page = ppages[1]
#     text, keyboards = await kb.order_data(callback.from_user.id, order_id, pages_count, page)
#     await callback.message.edit_text(f'{text}', parse_mode = 'HTML')
#     await callback.message.edit_reply_markup(reply_markup = keyboards)
    
# @router.callback_query(F.data.startswith('order_back_to_pagination'))
# async def order_back_to_pagination(callback: CallbackQuery):
#     await callback.answer()
#     data = callback.data.split('&')
#     ppages = data[1].split('#')
#     pages_count = ppages[0]
#     page = ppages[1]
#     count, orders_dict = await kb.orders(callback.from_user.id)
#     keyboards = await orders_pagination(orders_dict, int(page), int(pages_count))
#     if count  ==  1: t = '–í–∞—à –∑–∞–∫–∞–∑'
#     else: t = '–í–∞—à–∏ –∑–∞–∫–∞–∑—ã'
#     await callback.message.edit_text(f'{t} ({count}):')
#     await callback.message.edit_reply_markup(reply_markup = keyboards)


# –ü–û–ò–°–ö
# @router.callback_query(kb.Pagination.filter(F.action.in_(['prev', 'next'])))
# async def paginator_handler(callback: CallbackQuery, callback_data: kb.Pagination):
#     lresearches, lservices = await request.get_search(callback.from_user.id, callback_data.query)
#     if not bool(callback_data.many):
#         search_list = []
#         if lresearches and lservices:
#             all_list = lresearches + lservices
#             search_list = all_list
#         elif not lresearches and lservices:
#             search_list = lservices
#         elif not lservices and lresearches:
#             search_list = lresearches
#     else:
#         search_list, all_pages = get_ress(lresearches, lservices)
    
#     page_num = int(callback_data.page)
#     page = page_num - 1 if page_num > 1 else 1
#     if callback_data.action  ==  'next':
#         page = page_num + 1 if page_num < int(callback_data.all_pages) else page_num
    
#     with suppress(TelegramBadRequest):
#         if not bool(callback_data.many):
#             if '*' in search_list[page-1][1]:
#                 name = search_list[page-1][1].replace('*', '"')
#             else: name = search_list[page-1][1]
#             cost = kb.get_formating_cost(search_list[page-1][2])
#             await callback.message.edit_text(
#                 f'<b>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</b> {name}.\n\n<b>–¶–µ–Ω–∞:</b> {cost} ‚ÇΩ',
#                 reply_markup = kb.paginator(callback_data.query, callback_data.all_pages, page = page, item_id = search_list[page-1][0], what_is = search_list[page-1][3]),
#                 parse_mode = 'HTML'
#             )
#         else:
#             s = '\n\n'.join(search_list[page-1])
#             await callback.message.edit_text(f'{s}', parse_mode = 'HTML', reply_markup = kb.paginator(callback_data.query, all_pages, page = page, many = True))
#         await callback.answer()

# @router.message(F.text.regexp(r'^\D+([–∞-—è–ê-—è]+\s*\d*){,15}'))
# async def search(message: Message):
#     await message.answer('–ü–æ–∏—Å–∫...')
#     if '"' in message.text: search_text = message.text.replace('"','*')
#     else: search_text = message.text
#     # await message.answer_sticker('CAACAgEAAxkBAAIT4GYf05AoknhZGHsUaQgdKNvAIz7bAAIDCgACv4yQBJGkR4JOgqlxNAQ')
#     lresearches, lservices = await request.get_search(message.from_user.id, search_text)
#     res_count = len(lresearches)+len(lservices)
#     if res_count <=  8:
#         if res_count  ==  1: await message.answer(f'–ù–∞–π–¥–µ–Ω {res_count} —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É:\n<i>{message.text}</i>.', parse_mode = 'HTML')
#         elif res_count < 5: await message.answer(f'–ù–∞–π–¥–µ–Ω–æ {res_count} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É:\n<i>{message.text}</i>.', parse_mode = 'HTML')
#         else: await message.answer(f'–ù–∞–π–¥–µ–Ω–æ {res_count} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É:\n<i>{message.text}</i>.', parse_mode = 'HTML')
#         if len(message.text)>20: res_text = message.text[:20]
#         else: res_text = message.text
#         print(f'>>> –°–ª–∏–∫–æ–º –±–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç - {message.text} -------> {res_text}')
#         if lresearches and lservices:
#             all_list = lresearches + lservices
#             if '*' in all_list[0][1]:
#                 name = all_list[0][1].replace('*', '"')
#             else: name = all_list[0][1]
#             cost = kb.get_formating_cost(all_list[0][2])
#             await message.answer(f'<b>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</b> {name}.\n\n<b>–¶–µ–Ω–∞:</b> {cost} ‚ÇΩ', 
#                                 parse_mode = 'HTML', reply_markup = kb.paginator(res_text, res_count, item_id = all_list[0][0], what_is = all_list[0][3]))
#         elif not lresearches and lservices:
#             if '*' in lservices[0][1]:
#                 name = lservices[0][1].replace('*', '"')
#             else: name = lservices[0][1]
#             cost = kb.get_formating_cost(lservices[0][2])
#             await message.answer(f'<b>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</b> {name}.\n\n<b>–¶–µ–Ω–∞:</b> {cost} ‚ÇΩ', 
#                                 parse_mode = 'HTML', reply_markup = kb.paginator(res_text, res_count, item_id = lservices[0][0], what_is = lservices[0][3]))
#         elif not lservices and lresearches:
#             if '*' in lresearches[0][1]:
#                 name = lresearches[0][1].replace('*', '"')
#             else: name = lresearches[0][1]
#             cost = kb.get_formating_cost(lresearches[0][2])
#             await message.answer(f'<b>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</b> {name}.\n\n<b>–¶–µ–Ω–∞:</b> {cost} ‚ÇΩ', 
#                                 parse_mode = 'HTML', reply_markup = kb.paginator(res_text, res_count, item_id = lresearches[0][0], what_is = lresearches[0][3]))
#     else:
#         ress, all_pages = get_ress(lresearches, lservices)
#         s = '\n\n'.join(ress[0])
#         await message.answer(f'–ù–∞–π–¥–µ–Ω–æ c–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ({res_count}) –ø–æ –∑–∞–ø—Ä–æ—Å—É:\n<i>{message.text}</i>.\n\n<b>–ù–∞–∂–º–∏—Ç–µ</b> –Ω–∞ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç.', parse_mode = 'HTML')
#         if all_pages > 1:
#             await message.answer(f'{s}', parse_mode = 'HTML', reply_markup = kb.paginator(message.text, all_pages, many = True))
#         else: await message.answer(f'{s}', parse_mode = 'HTML')
# # –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±–æ–ª—å—à–µ 8
# def get_ress(lresearches, lservices, need_pages = False):
#     text = []
#     if lresearches and lservices:
#         all_list = lresearches + lservices
#         for item in all_list:
#             if '*' in item[1]: item[1] = item[1].replace('*','"')
#             text.append(f'üîé <code>{item[1]}</code>')
#     elif not lresearches and lservices:
#         for item in lservices:
#             if '*' in item[1]: item[1] = item[1].replace('*','"')
#             text.append(f'üîé <code>{item[1]}</code>')
#     elif not lservices and lresearches:
#         for item in lresearches:
#             if '*' in item[1]: item[1] = item[1].replace('*','"')
#             text.append(f'üîé <code>{item[1]}</code>')
#     all_pages = ceil(len(text)/12)
#     print('>>> –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü ', all_pages)
#     split = lambda lst, n: [lst[i::n] for i in range(n)]
#     ress = split(text, all_pages)
#     return ress, all_pages

# @router.callback_query(F.data.startswith('notice_button_action'))
# async def notice_actions(callback: CallbackQuery):
#     await callback.answer()
#     notice_action_id = callback.data.split('#')[1].split('/')[0]
#     city_id = await request.get_city_id(callback.from_user.id)
#     action = await request.get_research_data(int(notice_action_id))
#     if len(action.Name)>20: res_text = action.Name[:20]
#     else: res_text = action.Name
#     price = await request.get_research_price(action.ID, city_id)
#     cost = kb.get_formating_cost(price.Cost)
#     await callback.message.answer(f'<b>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</b> {action.Name}.\n\n<b>–¶–µ–Ω–∞:</b> {cost} ‚ÇΩ', 
#                                 parse_mode = 'HTML', reply_markup = kb.paginator(res_text, 1, item_id = action.ID, what_is = 'research'))
    
    
